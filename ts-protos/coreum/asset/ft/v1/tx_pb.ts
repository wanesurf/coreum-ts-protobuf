// @generated by protoc-gen-es v2.0.0 with parameter "target=ts"
// @generated from file coreum/asset/ft/v1/tx.proto (package coreum.asset.ft.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_amino_amino } from "../../../../amino/amino_pb";
import type { Params } from "./params_pb";
import { file_coreum_asset_ft_v1_params } from "./params_pb";
import type { DEXSettings, Feature } from "./token_pb";
import { file_coreum_asset_ft_v1_token } from "./token_pb";
import type { Coin } from "../../../../cosmos/base/v1beta1/coin_pb";
import { file_cosmos_base_v1beta1_coin } from "../../../../cosmos/base/v1beta1/coin_pb";
import { file_cosmos_msg_v1_msg } from "../../../../cosmos/msg/v1/msg_pb";
import { file_cosmos_proto_cosmos } from "../../../../cosmos_proto/cosmos_pb";
import { file_gogoproto_gogo } from "../../../../gogoproto/gogo_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file coreum/asset/ft/v1/tx.proto.
 */
export const file_coreum_asset_ft_v1_tx: GenFile = /*@__PURE__*/
  fileDesc("Chtjb3JldW0vYXNzZXQvZnQvdjEvdHgucHJvdG8SEmNvcmV1bS5hc3NldC5mdC52MSLFBAoITXNnSXNzdWUSKAoGaXNzdWVyGAEgASgJQhjStC0UY29zbW9zLkFkZHJlc3NTdHJpbmcSDgoGc3ltYm9sGAIgASgJEg8KB3N1YnVuaXQYAyABKAkSEQoJcHJlY2lzaW9uGAQgASgNEjUKDmluaXRpYWxfYW1vdW50GAUgASgJQh3I3h8A2t4fFWNvc21vc3Nkay5pby9tYXRoLkludBITCgtkZXNjcmlwdGlvbhgGIAEoCRItCghmZWF0dXJlcxgHIAMoDjIbLmNvcmV1bS5hc3NldC5mdC52MS5GZWF0dXJlEjYKCWJ1cm5fcmF0ZRgIIAEoCUIjyN4fANreHxtjb3Ntb3NzZGsuaW8vbWF0aC5MZWdhY3lEZWMSQQoUc2VuZF9jb21taXNzaW9uX3JhdGUYCSABKAlCI8jeHwDa3h8bY29zbW9zc2RrLmlvL21hdGguTGVnYWN5RGVjEhQKA3VyaRgKIAEoCUIH4t4fA1VSSRIdCgh1cmlfaGFzaBgLIAEoCUIL4t4fB1VSSUhhc2gSRgoSZXh0ZW5zaW9uX3NldHRpbmdzGAwgASgLMiouY29yZXVtLmFzc2V0LmZ0LnYxLkV4dGVuc2lvbklzc3VlU2V0dGluZ3MSRgoMZGV4X3NldHRpbmdzGA0gASgLMh8uY29yZXVtLmFzc2V0LmZ0LnYxLkRFWFNldHRpbmdzQg/i3h8LREVYU2V0dGluZ3M6IILnsCoGaXNzdWVyiuewKhBhc3NldGZ0L01zZ0lzc3VlIv0BChZFeHRlbnNpb25Jc3N1ZVNldHRpbmdzEg8KB2NvZGVfaWQYASABKAQSDQoFbGFiZWwYAiABKAkSXwoFZnVuZHMYAyADKAsyGS5jb3Ntb3MuYmFzZS52MWJldGExLkNvaW5CNcjeHwCq3x8oZ2l0aHViLmNvbS9jb3Ntb3MvY29zbW9zLXNkay90eXBlcy5Db2luc6jnsCoBEmIKC2lzc3VhbmNlTXNnGAQgASgMQk363h85Z2l0aHViLmNvbS9Db3NtV2FzbS93YXNtZC94L3dhc20vdHlwZXMuUmF3Q29udHJhY3RNZXNzYWdlmuewKgtpbmxpbmVfanNvbiKWAQoHTXNnTWludBIoCgZzZW5kZXIYASABKAlCGNK0LRRjb3Ntb3MuQWRkcmVzc1N0cmluZxItCgRjb2luGAIgASgLMhkuY29zbW9zLmJhc2UudjFiZXRhMS5Db2luQgTI3h8AEhEKCXJlY2lwaWVudBgDIAEoCTofguewKgZzZW5kZXKK57AqD2Fzc2V0ZnQvTXNnTWludCKDAQoHTXNnQnVybhIoCgZzZW5kZXIYASABKAlCGNK0LRRjb3Ntb3MuQWRkcmVzc1N0cmluZxItCgRjb2luGAMgASgLMhkuY29zbW9zLmJhc2UudjFiZXRhMS5Db2luQgTI3h8AOh+C57AqBnNlbmRlcornsCoPYXNzZXRmdC9Nc2dCdXJuIpgBCglNc2dGcmVlemUSKAoGc2VuZGVyGAEgASgJQhjStC0UY29zbW9zLkFkZHJlc3NTdHJpbmcSDwoHYWNjb3VudBgCIAEoCRItCgRjb2luGAMgASgLMhkuY29zbW9zLmJhc2UudjFiZXRhMS5Db2luQgTI3h8AOiGC57AqBnNlbmRlcornsCoRYXNzZXRmdC9Nc2dGcmVlemUinAEKC01zZ1VuZnJlZXplEigKBnNlbmRlchgBIAEoCUIY0rQtFGNvc21vcy5BZGRyZXNzU3RyaW5nEg8KB2FjY291bnQYAiABKAkSLQoEY29pbhgDIAEoCzIZLmNvc21vcy5iYXNlLnYxYmV0YTEuQ29pbkIEyN4fADojguewKgZzZW5kZXKK57AqE2Fzc2V0ZnQvTXNnVW5mcmVlemUimwEKDE1zZ1NldEZyb3plbhIoCgZzZW5kZXIYASABKAlCGNK0LRRjb3Ntb3MuQWRkcmVzc1N0cmluZxIPCgdhY2NvdW50GAIgASgJEi0KBGNvaW4YAyABKAsyGS5jb3Ntb3MuYmFzZS52MWJldGExLkNvaW5CBMjeHwA6IYLnsCoGc2VuZGVyiuewKhFhc3NldGZ0L1NldEZyb3plbiJ3ChFNc2dHbG9iYWxseUZyZWV6ZRIoCgZzZW5kZXIYASABKAlCGNK0LRRjb3Ntb3MuQWRkcmVzc1N0cmluZxINCgVkZW5vbRgCIAEoCTopguewKgZzZW5kZXKK57AqGWFzc2V0ZnQvTXNnR2xvYmFsbHlGcmVlemUiewoTTXNnR2xvYmFsbHlVbmZyZWV6ZRIoCgZzZW5kZXIYASABKAlCGNK0LRRjb3Ntb3MuQWRkcmVzc1N0cmluZxINCgVkZW5vbRgCIAEoCTorguewKgZzZW5kZXKK57AqG2Fzc2V0ZnQvTXNnR2xvYmFsbHlVbmZyZWV6ZSKcAQoLTXNnQ2xhd2JhY2sSKAoGc2VuZGVyGAEgASgJQhjStC0UY29zbW9zLkFkZHJlc3NTdHJpbmcSDwoHYWNjb3VudBgCIAEoCRItCgRjb2luGAMgASgLMhkuY29zbW9zLmJhc2UudjFiZXRhMS5Db2luQgTI3h8AOiOC57AqBnNlbmRlcornsCoTYXNzZXRmdC9Nc2dDbGF3YmFjayKyAQoWTXNnU2V0V2hpdGVsaXN0ZWRMaW1pdBIoCgZzZW5kZXIYASABKAlCGNK0LRRjb3Ntb3MuQWRkcmVzc1N0cmluZxIPCgdhY2NvdW50GAIgASgJEi0KBGNvaW4YAyABKAsyGS5jb3Ntb3MuYmFzZS52MWJldGExLkNvaW5CBMjeHwA6LoLnsCoGc2VuZGVyiuewKh5hc3NldGZ0L01zZ1NldFdoaXRlbGlzdGVkTGltaXQihgEKEE1zZ1RyYW5zZmVyQWRtaW4SKAoGc2VuZGVyGAEgASgJQhjStC0UY29zbW9zLkFkZHJlc3NTdHJpbmcSDwoHYWNjb3VudBgCIAEoCRINCgVkZW5vbRgDIAEoCTooguewKgZzZW5kZXKK57AqGGFzc2V0ZnQvTXNnVHJhbnNmZXJBZG1pbiJvCg1Nc2dDbGVhckFkbWluEigKBnNlbmRlchgBIAEoCUIY0rQtFGNvc21vcy5BZGRyZXNzU3RyaW5nEg0KBWRlbm9tGAIgASgJOiWC57AqBnNlbmRlcornsCoVYXNzZXRmdC9Nc2dDbGVhckFkbWluIowBChFNc2dVcGdyYWRlVG9rZW5WMRIoCgZzZW5kZXIYASABKAlCGNK0LRRjb3Ntb3MuQWRkcmVzc1N0cmluZxINCgVkZW5vbRgCIAEoCRITCgtpYmNfZW5hYmxlZBgDIAEoCDopguewKgZzZW5kZXKK57AqGWFzc2V0ZnQvTXNnVXBncmFkZVRva2VuVjEioQEKD01zZ1VwZGF0ZVBhcmFtcxIrCglhdXRob3JpdHkYASABKAlCGNK0LRRjb3Ntb3MuQWRkcmVzc1N0cmluZxI1CgZwYXJhbXMYAiABKAsyGi5jb3JldW0uYXNzZXQuZnQudjEuUGFyYW1zQgnI3h8AqOewKgE6KoLnsCoJYXV0aG9yaXR5iuewKhdhc3NldGZ0L01zZ1VwZGF0ZVBhcmFtcyLJAQoUTXNnVXBkYXRlREVYU2V0dGluZ3MSKAoGc2VuZGVyGAEgASgJQhjStC0UY29zbW9zLkFkZHJlc3NTdHJpbmcSDQoFZGVub20YAiABKAkSSgoMZGV4X3NldHRpbmdzGAMgASgLMh8uY29yZXVtLmFzc2V0LmZ0LnYxLkRFWFNldHRpbmdzQhPI3h8A4t4fC0RFWFNldHRpbmdzOiyC57AqBnNlbmRlcornsCocYXNzZXRmdC9Nc2dVcGRhdGVERVhTZXR0aW5ncyIPCg1FbXB0eVJlc3BvbnNlMooKCgNNc2cSSAoFSXNzdWUSHC5jb3JldW0uYXNzZXQuZnQudjEuTXNnSXNzdWUaIS5jb3JldW0uYXNzZXQuZnQudjEuRW1wdHlSZXNwb25zZRJGCgRNaW50EhsuY29yZXVtLmFzc2V0LmZ0LnYxLk1zZ01pbnQaIS5jb3JldW0uYXNzZXQuZnQudjEuRW1wdHlSZXNwb25zZRJGCgRCdXJuEhsuY29yZXVtLmFzc2V0LmZ0LnYxLk1zZ0J1cm4aIS5jb3JldW0uYXNzZXQuZnQudjEuRW1wdHlSZXNwb25zZRJKCgZGcmVlemUSHS5jb3JldW0uYXNzZXQuZnQudjEuTXNnRnJlZXplGiEuY29yZXVtLmFzc2V0LmZ0LnYxLkVtcHR5UmVzcG9uc2USTgoIVW5mcmVlemUSHy5jb3JldW0uYXNzZXQuZnQudjEuTXNnVW5mcmVlemUaIS5jb3JldW0uYXNzZXQuZnQudjEuRW1wdHlSZXNwb25zZRJQCglTZXRGcm96ZW4SIC5jb3JldW0uYXNzZXQuZnQudjEuTXNnU2V0RnJvemVuGiEuY29yZXVtLmFzc2V0LmZ0LnYxLkVtcHR5UmVzcG9uc2USWgoOR2xvYmFsbHlGcmVlemUSJS5jb3JldW0uYXNzZXQuZnQudjEuTXNnR2xvYmFsbHlGcmVlemUaIS5jb3JldW0uYXNzZXQuZnQudjEuRW1wdHlSZXNwb25zZRJeChBHbG9iYWxseVVuZnJlZXplEicuY29yZXVtLmFzc2V0LmZ0LnYxLk1zZ0dsb2JhbGx5VW5mcmVlemUaIS5jb3JldW0uYXNzZXQuZnQudjEuRW1wdHlSZXNwb25zZRJOCghDbGF3YmFjaxIfLmNvcmV1bS5hc3NldC5mdC52MS5Nc2dDbGF3YmFjaxohLmNvcmV1bS5hc3NldC5mdC52MS5FbXB0eVJlc3BvbnNlEmQKE1NldFdoaXRlbGlzdGVkTGltaXQSKi5jb3JldW0uYXNzZXQuZnQudjEuTXNnU2V0V2hpdGVsaXN0ZWRMaW1pdBohLmNvcmV1bS5hc3NldC5mdC52MS5FbXB0eVJlc3BvbnNlElgKDVRyYW5zZmVyQWRtaW4SJC5jb3JldW0uYXNzZXQuZnQudjEuTXNnVHJhbnNmZXJBZG1pbhohLmNvcmV1bS5hc3NldC5mdC52MS5FbXB0eVJlc3BvbnNlElIKCkNsZWFyQWRtaW4SIS5jb3JldW0uYXNzZXQuZnQudjEuTXNnQ2xlYXJBZG1pbhohLmNvcmV1bS5hc3NldC5mdC52MS5FbXB0eVJlc3BvbnNlEloKDlVwZ3JhZGVUb2tlblYxEiUuY29yZXVtLmFzc2V0LmZ0LnYxLk1zZ1VwZ3JhZGVUb2tlblYxGiEuY29yZXVtLmFzc2V0LmZ0LnYxLkVtcHR5UmVzcG9uc2USVgoMVXBkYXRlUGFyYW1zEiMuY29yZXVtLmFzc2V0LmZ0LnYxLk1zZ1VwZGF0ZVBhcmFtcxohLmNvcmV1bS5hc3NldC5mdC52MS5FbXB0eVJlc3BvbnNlEmAKEVVwZGF0ZURFWFNldHRpbmdzEiguY29yZXVtLmFzc2V0LmZ0LnYxLk1zZ1VwZGF0ZURFWFNldHRpbmdzGiEuY29yZXVtLmFzc2V0LmZ0LnYxLkVtcHR5UmVzcG9uc2UaBYDnsCoBQjxaNmdpdGh1Yi5jb20vQ29yZXVtRm91bmRhdGlvbi9jb3JldW0vdjQveC9hc3NldC9mdC90eXBlc8jhHgBiBnByb3RvMw", [file_amino_amino, file_coreum_asset_ft_v1_params, file_coreum_asset_ft_v1_token, file_cosmos_base_v1beta1_coin, file_cosmos_msg_v1_msg, file_cosmos_proto_cosmos, file_gogoproto_gogo]);

/**
 * MsgIssue defines message to issue new fungible token.
 *
 * @generated from message coreum.asset.ft.v1.MsgIssue
 */
export type MsgIssue = Message<"coreum.asset.ft.v1.MsgIssue"> & {
  /**
   * @generated from field: string issuer = 1;
   */
  issuer: string;

  /**
   * @generated from field: string symbol = 2;
   */
  symbol: string;

  /**
   * @generated from field: string subunit = 3;
   */
  subunit: string;

  /**
   * @generated from field: uint32 precision = 4;
   */
  precision: number;

  /**
   * @generated from field: string initial_amount = 5;
   */
  initialAmount: string;

  /**
   * @generated from field: string description = 6;
   */
  description: string;

  /**
   * @generated from field: repeated coreum.asset.ft.v1.Feature features = 7;
   */
  features: Feature[];

  /**
   * burn_rate is a number between 0 and 1 which will be multiplied by send amount to determine
   * burn_amount. This value will be burnt on top of the send amount.
   *
   * @generated from field: string burn_rate = 8;
   */
  burnRate: string;

  /**
   * send_commission_rate is a number between 0 and 1 which will be multiplied by send amount to determine
   * amount sent to the token admin account.
   *
   * @generated from field: string send_commission_rate = 9;
   */
  sendCommissionRate: string;

  /**
   * @generated from field: string uri = 10;
   */
  uri: string;

  /**
   * @generated from field: string uri_hash = 11;
   */
  uriHash: string;

  /**
   * extension_settings must be provided in case wasm extensions are enabled.
   *
   * @generated from field: coreum.asset.ft.v1.ExtensionIssueSettings extension_settings = 12;
   */
  extensionSettings?: ExtensionIssueSettings;

  /**
   * @generated from field: coreum.asset.ft.v1.DEXSettings dex_settings = 13;
   */
  dexSettings?: DEXSettings;
};

/**
 * Describes the message coreum.asset.ft.v1.MsgIssue.
 * Use `create(MsgIssueSchema)` to create a new message.
 */
export const MsgIssueSchema: GenMessage<MsgIssue> = /*@__PURE__*/
  messageDesc(file_coreum_asset_ft_v1_tx, 0);

/**
 * ExtensionIssueSettings are settings that will be used to Instantiate the smart contract which contains
 * the source code for the extension.
 *
 * @generated from message coreum.asset.ft.v1.ExtensionIssueSettings
 */
export type ExtensionIssueSettings = Message<"coreum.asset.ft.v1.ExtensionIssueSettings"> & {
  /**
   * code_id is the reference to the stored WASM code
   *
   * @generated from field: uint64 code_id = 1;
   */
  codeId: bigint;

  /**
   * label is optional metadata to be stored with a contract instance.
   *
   * @generated from field: string label = 2;
   */
  label: string;

  /**
   * funds coins that are transferred to the contract on instantiation
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin funds = 3;
   */
  funds: Coin[];

  /**
   * optional json encoded data to pass to WASM on instantiation by the ft issuer
   *
   * @generated from field: bytes issuanceMsg = 4;
   */
  issuanceMsg: Uint8Array;
};

/**
 * Describes the message coreum.asset.ft.v1.ExtensionIssueSettings.
 * Use `create(ExtensionIssueSettingsSchema)` to create a new message.
 */
export const ExtensionIssueSettingsSchema: GenMessage<ExtensionIssueSettings> = /*@__PURE__*/
  messageDesc(file_coreum_asset_ft_v1_tx, 1);

/**
 * @generated from message coreum.asset.ft.v1.MsgMint
 */
export type MsgMint = Message<"coreum.asset.ft.v1.MsgMint"> & {
  /**
   * @generated from field: string sender = 1;
   */
  sender: string;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin coin = 2;
   */
  coin?: Coin;

  /**
   * @generated from field: string recipient = 3;
   */
  recipient: string;
};

/**
 * Describes the message coreum.asset.ft.v1.MsgMint.
 * Use `create(MsgMintSchema)` to create a new message.
 */
export const MsgMintSchema: GenMessage<MsgMint> = /*@__PURE__*/
  messageDesc(file_coreum_asset_ft_v1_tx, 2);

/**
 * @generated from message coreum.asset.ft.v1.MsgBurn
 */
export type MsgBurn = Message<"coreum.asset.ft.v1.MsgBurn"> & {
  /**
   * @generated from field: string sender = 1;
   */
  sender: string;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin coin = 3;
   */
  coin?: Coin;
};

/**
 * Describes the message coreum.asset.ft.v1.MsgBurn.
 * Use `create(MsgBurnSchema)` to create a new message.
 */
export const MsgBurnSchema: GenMessage<MsgBurn> = /*@__PURE__*/
  messageDesc(file_coreum_asset_ft_v1_tx, 3);

/**
 * @generated from message coreum.asset.ft.v1.MsgFreeze
 */
export type MsgFreeze = Message<"coreum.asset.ft.v1.MsgFreeze"> & {
  /**
   * @generated from field: string sender = 1;
   */
  sender: string;

  /**
   * @generated from field: string account = 2;
   */
  account: string;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin coin = 3;
   */
  coin?: Coin;
};

/**
 * Describes the message coreum.asset.ft.v1.MsgFreeze.
 * Use `create(MsgFreezeSchema)` to create a new message.
 */
export const MsgFreezeSchema: GenMessage<MsgFreeze> = /*@__PURE__*/
  messageDesc(file_coreum_asset_ft_v1_tx, 4);

/**
 * @generated from message coreum.asset.ft.v1.MsgUnfreeze
 */
export type MsgUnfreeze = Message<"coreum.asset.ft.v1.MsgUnfreeze"> & {
  /**
   * @generated from field: string sender = 1;
   */
  sender: string;

  /**
   * @generated from field: string account = 2;
   */
  account: string;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin coin = 3;
   */
  coin?: Coin;
};

/**
 * Describes the message coreum.asset.ft.v1.MsgUnfreeze.
 * Use `create(MsgUnfreezeSchema)` to create a new message.
 */
export const MsgUnfreezeSchema: GenMessage<MsgUnfreeze> = /*@__PURE__*/
  messageDesc(file_coreum_asset_ft_v1_tx, 5);

/**
 * @generated from message coreum.asset.ft.v1.MsgSetFrozen
 */
export type MsgSetFrozen = Message<"coreum.asset.ft.v1.MsgSetFrozen"> & {
  /**
   * @generated from field: string sender = 1;
   */
  sender: string;

  /**
   * @generated from field: string account = 2;
   */
  account: string;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin coin = 3;
   */
  coin?: Coin;
};

/**
 * Describes the message coreum.asset.ft.v1.MsgSetFrozen.
 * Use `create(MsgSetFrozenSchema)` to create a new message.
 */
export const MsgSetFrozenSchema: GenMessage<MsgSetFrozen> = /*@__PURE__*/
  messageDesc(file_coreum_asset_ft_v1_tx, 6);

/**
 * @generated from message coreum.asset.ft.v1.MsgGloballyFreeze
 */
export type MsgGloballyFreeze = Message<"coreum.asset.ft.v1.MsgGloballyFreeze"> & {
  /**
   * @generated from field: string sender = 1;
   */
  sender: string;

  /**
   * @generated from field: string denom = 2;
   */
  denom: string;
};

/**
 * Describes the message coreum.asset.ft.v1.MsgGloballyFreeze.
 * Use `create(MsgGloballyFreezeSchema)` to create a new message.
 */
export const MsgGloballyFreezeSchema: GenMessage<MsgGloballyFreeze> = /*@__PURE__*/
  messageDesc(file_coreum_asset_ft_v1_tx, 7);

/**
 * @generated from message coreum.asset.ft.v1.MsgGloballyUnfreeze
 */
export type MsgGloballyUnfreeze = Message<"coreum.asset.ft.v1.MsgGloballyUnfreeze"> & {
  /**
   * @generated from field: string sender = 1;
   */
  sender: string;

  /**
   * @generated from field: string denom = 2;
   */
  denom: string;
};

/**
 * Describes the message coreum.asset.ft.v1.MsgGloballyUnfreeze.
 * Use `create(MsgGloballyUnfreezeSchema)` to create a new message.
 */
export const MsgGloballyUnfreezeSchema: GenMessage<MsgGloballyUnfreeze> = /*@__PURE__*/
  messageDesc(file_coreum_asset_ft_v1_tx, 8);

/**
 * @generated from message coreum.asset.ft.v1.MsgClawback
 */
export type MsgClawback = Message<"coreum.asset.ft.v1.MsgClawback"> & {
  /**
   * @generated from field: string sender = 1;
   */
  sender: string;

  /**
   * @generated from field: string account = 2;
   */
  account: string;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin coin = 3;
   */
  coin?: Coin;
};

/**
 * Describes the message coreum.asset.ft.v1.MsgClawback.
 * Use `create(MsgClawbackSchema)` to create a new message.
 */
export const MsgClawbackSchema: GenMessage<MsgClawback> = /*@__PURE__*/
  messageDesc(file_coreum_asset_ft_v1_tx, 9);

/**
 * @generated from message coreum.asset.ft.v1.MsgSetWhitelistedLimit
 */
export type MsgSetWhitelistedLimit = Message<"coreum.asset.ft.v1.MsgSetWhitelistedLimit"> & {
  /**
   * @generated from field: string sender = 1;
   */
  sender: string;

  /**
   * @generated from field: string account = 2;
   */
  account: string;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin coin = 3;
   */
  coin?: Coin;
};

/**
 * Describes the message coreum.asset.ft.v1.MsgSetWhitelistedLimit.
 * Use `create(MsgSetWhitelistedLimitSchema)` to create a new message.
 */
export const MsgSetWhitelistedLimitSchema: GenMessage<MsgSetWhitelistedLimit> = /*@__PURE__*/
  messageDesc(file_coreum_asset_ft_v1_tx, 10);

/**
 * @generated from message coreum.asset.ft.v1.MsgTransferAdmin
 */
export type MsgTransferAdmin = Message<"coreum.asset.ft.v1.MsgTransferAdmin"> & {
  /**
   * @generated from field: string sender = 1;
   */
  sender: string;

  /**
   * @generated from field: string account = 2;
   */
  account: string;

  /**
   * @generated from field: string denom = 3;
   */
  denom: string;
};

/**
 * Describes the message coreum.asset.ft.v1.MsgTransferAdmin.
 * Use `create(MsgTransferAdminSchema)` to create a new message.
 */
export const MsgTransferAdminSchema: GenMessage<MsgTransferAdmin> = /*@__PURE__*/
  messageDesc(file_coreum_asset_ft_v1_tx, 11);

/**
 * @generated from message coreum.asset.ft.v1.MsgClearAdmin
 */
export type MsgClearAdmin = Message<"coreum.asset.ft.v1.MsgClearAdmin"> & {
  /**
   * @generated from field: string sender = 1;
   */
  sender: string;

  /**
   * @generated from field: string denom = 2;
   */
  denom: string;
};

/**
 * Describes the message coreum.asset.ft.v1.MsgClearAdmin.
 * Use `create(MsgClearAdminSchema)` to create a new message.
 */
export const MsgClearAdminSchema: GenMessage<MsgClearAdmin> = /*@__PURE__*/
  messageDesc(file_coreum_asset_ft_v1_tx, 12);

/**
 * MsgUpgradeTokenV1 is the message upgrading token to V1.
 *
 * @generated from message coreum.asset.ft.v1.MsgUpgradeTokenV1
 */
export type MsgUpgradeTokenV1 = Message<"coreum.asset.ft.v1.MsgUpgradeTokenV1"> & {
  /**
   * @generated from field: string sender = 1;
   */
  sender: string;

  /**
   * @generated from field: string denom = 2;
   */
  denom: string;

  /**
   * @generated from field: bool ibc_enabled = 3;
   */
  ibcEnabled: boolean;
};

/**
 * Describes the message coreum.asset.ft.v1.MsgUpgradeTokenV1.
 * Use `create(MsgUpgradeTokenV1Schema)` to create a new message.
 */
export const MsgUpgradeTokenV1Schema: GenMessage<MsgUpgradeTokenV1> = /*@__PURE__*/
  messageDesc(file_coreum_asset_ft_v1_tx, 13);

/**
 * @generated from message coreum.asset.ft.v1.MsgUpdateParams
 */
export type MsgUpdateParams = Message<"coreum.asset.ft.v1.MsgUpdateParams"> & {
  /**
   * @generated from field: string authority = 1;
   */
  authority: string;

  /**
   * @generated from field: coreum.asset.ft.v1.Params params = 2;
   */
  params?: Params;
};

/**
 * Describes the message coreum.asset.ft.v1.MsgUpdateParams.
 * Use `create(MsgUpdateParamsSchema)` to create a new message.
 */
export const MsgUpdateParamsSchema: GenMessage<MsgUpdateParams> = /*@__PURE__*/
  messageDesc(file_coreum_asset_ft_v1_tx, 14);

/**
 * @generated from message coreum.asset.ft.v1.MsgUpdateDEXSettings
 */
export type MsgUpdateDEXSettings = Message<"coreum.asset.ft.v1.MsgUpdateDEXSettings"> & {
  /**
   * @generated from field: string sender = 1;
   */
  sender: string;

  /**
   * @generated from field: string denom = 2;
   */
  denom: string;

  /**
   * @generated from field: coreum.asset.ft.v1.DEXSettings dex_settings = 3;
   */
  dexSettings?: DEXSettings;
};

/**
 * Describes the message coreum.asset.ft.v1.MsgUpdateDEXSettings.
 * Use `create(MsgUpdateDEXSettingsSchema)` to create a new message.
 */
export const MsgUpdateDEXSettingsSchema: GenMessage<MsgUpdateDEXSettings> = /*@__PURE__*/
  messageDesc(file_coreum_asset_ft_v1_tx, 15);

/**
 * @generated from message coreum.asset.ft.v1.EmptyResponse
 */
export type EmptyResponse = Message<"coreum.asset.ft.v1.EmptyResponse"> & {
};

/**
 * Describes the message coreum.asset.ft.v1.EmptyResponse.
 * Use `create(EmptyResponseSchema)` to create a new message.
 */
export const EmptyResponseSchema: GenMessage<EmptyResponse> = /*@__PURE__*/
  messageDesc(file_coreum_asset_ft_v1_tx, 16);

/**
 * Msg defines the Msg service.
 *
 * @generated from service coreum.asset.ft.v1.Msg
 */
export const Msg: GenService<{
  /**
   * Issue defines a method to issue a new fungible token.
   *
   * @generated from rpc coreum.asset.ft.v1.Msg.Issue
   */
  issue: {
    methodKind: "unary";
    input: typeof MsgIssueSchema;
    output: typeof EmptyResponseSchema;
  },
  /**
   * Mint mints new fungible tokens.
   *
   * @generated from rpc coreum.asset.ft.v1.Msg.Mint
   */
  mint: {
    methodKind: "unary";
    input: typeof MsgMintSchema;
    output: typeof EmptyResponseSchema;
  },
  /**
   * Burn burns the specified fungible tokens from senders balance if the sender has enough balance.
   *
   * @generated from rpc coreum.asset.ft.v1.Msg.Burn
   */
  burn: {
    methodKind: "unary";
    input: typeof MsgBurnSchema;
    output: typeof EmptyResponseSchema;
  },
  /**
   * Freeze freezes a part of the fungible tokens in an
   * account, only if the freezable feature is enabled on that token.
   *
   * @generated from rpc coreum.asset.ft.v1.Msg.Freeze
   */
  freeze: {
    methodKind: "unary";
    input: typeof MsgFreezeSchema;
    output: typeof EmptyResponseSchema;
  },
  /**
   * Unfreeze unfreezes a part of the frozen fungible tokens in an
   * account, only if there are such frozen tokens on that account.
   *
   * @generated from rpc coreum.asset.ft.v1.Msg.Unfreeze
   */
  unfreeze: {
    methodKind: "unary";
    input: typeof MsgUnfreezeSchema;
    output: typeof EmptyResponseSchema;
  },
  /**
   * SetFrozen sets the absolute value of frozen amount.
   *
   * @generated from rpc coreum.asset.ft.v1.Msg.SetFrozen
   */
  setFrozen: {
    methodKind: "unary";
    input: typeof MsgSetFrozenSchema;
    output: typeof EmptyResponseSchema;
  },
  /**
   * GloballyFreeze freezes fungible token so no operations are allowed with it before unfrozen.
   * This operation is idempotent so global freeze of already frozen token does nothing.
   *
   * @generated from rpc coreum.asset.ft.v1.Msg.GloballyFreeze
   */
  globallyFreeze: {
    methodKind: "unary";
    input: typeof MsgGloballyFreezeSchema;
    output: typeof EmptyResponseSchema;
  },
  /**
   * GloballyUnfreeze unfreezes fungible token and unblocks basic operations on it.
   * This operation is idempotent so global unfreezing of non-frozen token does nothing.
   *
   * @generated from rpc coreum.asset.ft.v1.Msg.GloballyUnfreeze
   */
  globallyUnfreeze: {
    methodKind: "unary";
    input: typeof MsgGloballyUnfreezeSchema;
    output: typeof EmptyResponseSchema;
  },
  /**
   * Clawback confiscates a part of fungible tokens from an account
   * to the admin, only if the clawback feature is enabled on that token.
   *
   * @generated from rpc coreum.asset.ft.v1.Msg.Clawback
   */
  clawback: {
    methodKind: "unary";
    input: typeof MsgClawbackSchema;
    output: typeof EmptyResponseSchema;
  },
  /**
   * SetWhitelistedLimit sets the limit of how many tokens a specific account may hold.
   *
   * @generated from rpc coreum.asset.ft.v1.Msg.SetWhitelistedLimit
   */
  setWhitelistedLimit: {
    methodKind: "unary";
    input: typeof MsgSetWhitelistedLimitSchema;
    output: typeof EmptyResponseSchema;
  },
  /**
   * TransferAdmin changes admin of a fungible token.
   *
   * @generated from rpc coreum.asset.ft.v1.Msg.TransferAdmin
   */
  transferAdmin: {
    methodKind: "unary";
    input: typeof MsgTransferAdminSchema;
    output: typeof EmptyResponseSchema;
  },
  /**
   * ClearAdmin removes admin of a fungible token.
   *
   * @generated from rpc coreum.asset.ft.v1.Msg.ClearAdmin
   */
  clearAdmin: {
    methodKind: "unary";
    input: typeof MsgClearAdminSchema;
    output: typeof EmptyResponseSchema;
  },
  /**
   * TokenUpgradeV1 upgrades token to version V1.
   *
   * @generated from rpc coreum.asset.ft.v1.Msg.UpgradeTokenV1
   */
  upgradeTokenV1: {
    methodKind: "unary";
    input: typeof MsgUpgradeTokenV1Schema;
    output: typeof EmptyResponseSchema;
  },
  /**
   * UpdateParams is a governance operation to modify the parameters of the module.
   * NOTE: all parameters must be provided.
   *
   * @generated from rpc coreum.asset.ft.v1.Msg.UpdateParams
   */
  updateParams: {
    methodKind: "unary";
    input: typeof MsgUpdateParamsSchema;
    output: typeof EmptyResponseSchema;
  },
  /**
   * UpdateDEXSettings upgrades token DEX settings.
   *
   * @generated from rpc coreum.asset.ft.v1.Msg.UpdateDEXSettings
   */
  updateDEXSettings: {
    methodKind: "unary";
    input: typeof MsgUpdateDEXSettingsSchema;
    output: typeof EmptyResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_coreum_asset_ft_v1_tx, 0);

