// @generated by protoc-gen-es v2.0.0 with parameter "target=ts"
// @generated from file coreum/asset/nft/v1/query.proto (package coreum.asset.nft.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import type { Class } from "./nft_pb";
import { file_coreum_asset_nft_v1_nft } from "./nft_pb";
import type { Params } from "./params_pb";
import { file_coreum_asset_nft_v1_params } from "./params_pb";
import type { PageRequest, PageResponse } from "../../../../cosmos/base/query/v1beta1/pagination_pb";
import { file_cosmos_base_query_v1beta1_pagination } from "../../../../cosmos/base/query/v1beta1/pagination_pb";
import { file_gogoproto_gogo } from "../../../../gogoproto/gogo_pb";
import { file_google_api_annotations } from "../../../../google/api/annotations_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file coreum/asset/nft/v1/query.proto.
 */
export const file_coreum_asset_nft_v1_query: GenFile = /*@__PURE__*/
  fileDesc("Ch9jb3JldW0vYXNzZXQvbmZ0L3YxL3F1ZXJ5LnByb3RvEhNjb3JldW0uYXNzZXQubmZ0LnYxIhQKElF1ZXJ5UGFyYW1zUmVxdWVzdCJIChNRdWVyeVBhcmFtc1Jlc3BvbnNlEjEKBnBhcmFtcxgBIAEoCzIbLmNvcmV1bS5hc3NldC5uZnQudjEuUGFyYW1zQgTI3h8AIh8KEVF1ZXJ5Q2xhc3NSZXF1ZXN0EgoKAmlkGAEgASgJIkUKElF1ZXJ5Q2xhc3NSZXNwb25zZRIvCgVjbGFzcxgBIAEoCzIaLmNvcmV1bS5hc3NldC5uZnQudjEuQ2xhc3NCBMjeHwAiYQoTUXVlcnlDbGFzc2VzUmVxdWVzdBI6CgpwYWdpbmF0aW9uGAEgASgLMiYuY29zbW9zLmJhc2UucXVlcnkudjFiZXRhMS5QYWdlUmVxdWVzdBIOCgZpc3N1ZXIYAiABKAkihgEKFFF1ZXJ5Q2xhc3Nlc1Jlc3BvbnNlEjsKCnBhZ2luYXRpb24YASABKAsyJy5jb3Ntb3MuYmFzZS5xdWVyeS52MWJldGExLlBhZ2VSZXNwb25zZRIxCgdjbGFzc2VzGAIgAygLMhouY29yZXVtLmFzc2V0Lm5mdC52MS5DbGFzc0IEyN4fACIyChJRdWVyeUZyb3plblJlcXVlc3QSCgoCaWQYASABKAkSEAoIY2xhc3NfaWQYAiABKAkiJQoTUXVlcnlGcm96ZW5SZXNwb25zZRIOCgZmcm96ZW4YASABKAgiPAoXUXVlcnlDbGFzc0Zyb3plblJlcXVlc3QSEAoIY2xhc3NfaWQYASABKAkSDwoHYWNjb3VudBgCIAEoCSIqChhRdWVyeUNsYXNzRnJvemVuUmVzcG9uc2USDgoGZnJvemVuGAEgASgIIkgKF1F1ZXJ5V2hpdGVsaXN0ZWRSZXF1ZXN0EgoKAmlkGAEgASgJEhAKCGNsYXNzX2lkGAIgASgJEg8KB2FjY291bnQYAyABKAkiLwoYUXVlcnlXaGl0ZWxpc3RlZFJlc3BvbnNlEhMKC3doaXRlbGlzdGVkGAEgASgIIoEBCiVRdWVyeVdoaXRlbGlzdGVkQWNjb3VudHNGb3JORlRSZXF1ZXN0EjoKCnBhZ2luYXRpb24YASABKAsyJi5jb3Ntb3MuYmFzZS5xdWVyeS52MWJldGExLlBhZ2VSZXF1ZXN0EgoKAmlkGAIgASgJEhAKCGNsYXNzX2lkGAMgASgJIncKJlF1ZXJ5V2hpdGVsaXN0ZWRBY2NvdW50c0Zvck5GVFJlc3BvbnNlEjsKCnBhZ2luYXRpb24YASABKAsyJy5jb3Ntb3MuYmFzZS5xdWVyeS52MWJldGExLlBhZ2VSZXNwb25zZRIQCghhY2NvdW50cxgCIAMoCSJ0CiRRdWVyeUNsYXNzV2hpdGVsaXN0ZWRBY2NvdW50c1JlcXVlc3QSOgoKcGFnaW5hdGlvbhgBIAEoCzImLmNvc21vcy5iYXNlLnF1ZXJ5LnYxYmV0YTEuUGFnZVJlcXVlc3QSEAoIY2xhc3NfaWQYAiABKAkidgolUXVlcnlDbGFzc1doaXRlbGlzdGVkQWNjb3VudHNSZXNwb25zZRI7CgpwYWdpbmF0aW9uGAEgASgLMicuY29zbW9zLmJhc2UucXVlcnkudjFiZXRhMS5QYWdlUmVzcG9uc2USEAoIYWNjb3VudHMYAiADKAkibwofUXVlcnlDbGFzc0Zyb3plbkFjY291bnRzUmVxdWVzdBI6CgpwYWdpbmF0aW9uGAEgASgLMiYuY29zbW9zLmJhc2UucXVlcnkudjFiZXRhMS5QYWdlUmVxdWVzdBIQCghjbGFzc19pZBgCIAEoCSJxCiBRdWVyeUNsYXNzRnJvemVuQWNjb3VudHNSZXNwb25zZRI7CgpwYWdpbmF0aW9uGAEgASgLMicuY29zbW9zLmJhc2UucXVlcnkudjFiZXRhMS5QYWdlUmVzcG9uc2USEAoIYWNjb3VudHMYAiADKAkiOAoUUXVlcnlCdXJudE5GVFJlcXVlc3QSEAoIY2xhc3NfaWQYASABKAkSDgoGbmZ0X2lkGAIgASgJIiYKFVF1ZXJ5QnVybnRORlRSZXNwb25zZRINCgVidXJudBgBIAEoCCJsChxRdWVyeUJ1cm50TkZUc0luQ2xhc3NSZXF1ZXN0EjoKCnBhZ2luYXRpb24YASABKAsyJi5jb3Ntb3MuYmFzZS5xdWVyeS52MWJldGExLlBhZ2VSZXF1ZXN0EhAKCGNsYXNzX2lkGAIgASgJIm0KHVF1ZXJ5QnVybnRORlRzSW5DbGFzc1Jlc3BvbnNlEjsKCnBhZ2luYXRpb24YASABKAsyJy5jb3Ntb3MuYmFzZS5xdWVyeS52MWJldGExLlBhZ2VSZXNwb25zZRIPCgduZnRfaWRzGAIgAygJMucOCgVRdWVyeRKAAQoGUGFyYW1zEicuY29yZXVtLmFzc2V0Lm5mdC52MS5RdWVyeVBhcmFtc1JlcXVlc3QaKC5jb3JldW0uYXNzZXQubmZ0LnYxLlF1ZXJ5UGFyYW1zUmVzcG9uc2UiI4LT5JMCHRIbL2NvcmV1bS9hc3NldC9uZnQvdjEvcGFyYW1zEoMBCgVDbGFzcxImLmNvcmV1bS5hc3NldC5uZnQudjEuUXVlcnlDbGFzc1JlcXVlc3QaJy5jb3JldW0uYXNzZXQubmZ0LnYxLlF1ZXJ5Q2xhc3NSZXNwb25zZSIpgtPkkwIjEiEvY29yZXVtL2Fzc2V0L25mdC92MS9jbGFzc2VzL3tpZH0ShAEKB0NsYXNzZXMSKC5jb3JldW0uYXNzZXQubmZ0LnYxLlF1ZXJ5Q2xhc3Nlc1JlcXVlc3QaKS5jb3JldW0uYXNzZXQubmZ0LnYxLlF1ZXJ5Q2xhc3Nlc1Jlc3BvbnNlIiSC0+STAh4SHC9jb3JldW0vYXNzZXQvbmZ0L3YxL2NsYXNzZXMSnQEKBkZyb3plbhInLmNvcmV1bS5hc3NldC5uZnQudjEuUXVlcnlGcm96ZW5SZXF1ZXN0GiguY29yZXVtLmFzc2V0Lm5mdC52MS5RdWVyeUZyb3plblJlc3BvbnNlIkCC0+STAjoSOC9jb3JldW0vYXNzZXQvbmZ0L3YxL2NsYXNzZXMve2NsYXNzX2lkfS9uZnRzL3tpZH0vZnJvemVuEqwBCgtDbGFzc0Zyb3plbhIsLmNvcmV1bS5hc3NldC5uZnQudjEuUXVlcnlDbGFzc0Zyb3plblJlcXVlc3QaLS5jb3JldW0uYXNzZXQubmZ0LnYxLlF1ZXJ5Q2xhc3NGcm96ZW5SZXNwb25zZSJAgtPkkwI6EjgvY29yZXVtL2Fzc2V0L25mdC92MS9jbGFzc2VzL3tjbGFzc19pZH0vZnJvemVuL3thY2NvdW50fRK6AQoTQ2xhc3NGcm96ZW5BY2NvdW50cxI0LmNvcmV1bS5hc3NldC5uZnQudjEuUXVlcnlDbGFzc0Zyb3plbkFjY291bnRzUmVxdWVzdBo1LmNvcmV1bS5hc3NldC5uZnQudjEuUXVlcnlDbGFzc0Zyb3plbkFjY291bnRzUmVzcG9uc2UiNoLT5JMCMBIuL2NvcmV1bS9hc3NldC9uZnQvdjEvY2xhc3Nlcy97Y2xhc3NfaWR9L2Zyb3plbhK7AQoLV2hpdGVsaXN0ZWQSLC5jb3JldW0uYXNzZXQubmZ0LnYxLlF1ZXJ5V2hpdGVsaXN0ZWRSZXF1ZXN0Gi0uY29yZXVtLmFzc2V0Lm5mdC52MS5RdWVyeVdoaXRlbGlzdGVkUmVzcG9uc2UiT4LT5JMCSRJHL2NvcmV1bS9hc3NldC9uZnQvdjEvY2xhc3Nlcy97Y2xhc3NfaWR9L25mdHMve2lkfS93aGl0ZWxpc3RlZC97YWNjb3VudH0S2wEKGVdoaXRlbGlzdGVkQWNjb3VudHNGb3JORlQSOi5jb3JldW0uYXNzZXQubmZ0LnYxLlF1ZXJ5V2hpdGVsaXN0ZWRBY2NvdW50c0Zvck5GVFJlcXVlc3QaOy5jb3JldW0uYXNzZXQubmZ0LnYxLlF1ZXJ5V2hpdGVsaXN0ZWRBY2NvdW50c0Zvck5GVFJlc3BvbnNlIkWC0+STAj8SPS9jb3JldW0vYXNzZXQvbmZ0L3YxL2NsYXNzZXMve2NsYXNzX2lkfS9uZnRzL3tpZH0vd2hpdGVsaXN0ZWQSzgEKGENsYXNzV2hpdGVsaXN0ZWRBY2NvdW50cxI5LmNvcmV1bS5hc3NldC5uZnQudjEuUXVlcnlDbGFzc1doaXRlbGlzdGVkQWNjb3VudHNSZXF1ZXN0GjouY29yZXVtLmFzc2V0Lm5mdC52MS5RdWVyeUNsYXNzV2hpdGVsaXN0ZWRBY2NvdW50c1Jlc3BvbnNlIjuC0+STAjUSMy9jb3JldW0vYXNzZXQvbmZ0L3YxL2NsYXNzZXMve2NsYXNzX2lkfS93aGl0ZWxpc3RlZBKhAQoIQnVybnRORlQSKS5jb3JldW0uYXNzZXQubmZ0LnYxLlF1ZXJ5QnVybnRORlRSZXF1ZXN0GiouY29yZXVtLmFzc2V0Lm5mdC52MS5RdWVyeUJ1cm50TkZUUmVzcG9uc2UiPoLT5JMCOBI2L2NvcmV1bS9hc3NldC9uZnQvdjEvY2xhc3Nlcy97Y2xhc3NfaWR9L2J1cm50L3tuZnRfaWR9ErABChBCdXJudE5GVHNJbkNsYXNzEjEuY29yZXVtLmFzc2V0Lm5mdC52MS5RdWVyeUJ1cm50TkZUc0luQ2xhc3NSZXF1ZXN0GjIuY29yZXVtLmFzc2V0Lm5mdC52MS5RdWVyeUJ1cm50TkZUc0luQ2xhc3NSZXNwb25zZSI1gtPkkwIvEi0vY29yZXVtL2Fzc2V0L25mdC92MS9jbGFzc2VzL3tjbGFzc19pZH0vYnVybnRCOVo3Z2l0aHViLmNvbS9Db3JldW1Gb3VuZGF0aW9uL2NvcmV1bS92NC94L2Fzc2V0L25mdC90eXBlc2IGcHJvdG8z", [file_coreum_asset_nft_v1_nft, file_coreum_asset_nft_v1_params, file_cosmos_base_query_v1beta1_pagination, file_gogoproto_gogo, file_google_api_annotations]);

/**
 * QueryParamsRequest defines the request type for querying x/asset/nft parameters.
 *
 * @generated from message coreum.asset.nft.v1.QueryParamsRequest
 */
export type QueryParamsRequest = Message<"coreum.asset.nft.v1.QueryParamsRequest"> & {
};

/**
 * Describes the message coreum.asset.nft.v1.QueryParamsRequest.
 * Use `create(QueryParamsRequestSchema)` to create a new message.
 */
export const QueryParamsRequestSchema: GenMessage<QueryParamsRequest> = /*@__PURE__*/
  messageDesc(file_coreum_asset_nft_v1_query, 0);

/**
 * QueryParamsResponse defines the response type for querying x/asset/nft parameters.
 *
 * @generated from message coreum.asset.nft.v1.QueryParamsResponse
 */
export type QueryParamsResponse = Message<"coreum.asset.nft.v1.QueryParamsResponse"> & {
  /**
   * @generated from field: coreum.asset.nft.v1.Params params = 1;
   */
  params?: Params;
};

/**
 * Describes the message coreum.asset.nft.v1.QueryParamsResponse.
 * Use `create(QueryParamsResponseSchema)` to create a new message.
 */
export const QueryParamsResponseSchema: GenMessage<QueryParamsResponse> = /*@__PURE__*/
  messageDesc(file_coreum_asset_nft_v1_query, 1);

/**
 * QueryTokenRequest is request type for the Query/Class RPC method.
 *
 * @generated from message coreum.asset.nft.v1.QueryClassRequest
 */
export type QueryClassRequest = Message<"coreum.asset.nft.v1.QueryClassRequest"> & {
  /**
   * we don't use the gogoproto.customname here since the google.api.http ignores it and generates invalid code.
   *
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message coreum.asset.nft.v1.QueryClassRequest.
 * Use `create(QueryClassRequestSchema)` to create a new message.
 */
export const QueryClassRequestSchema: GenMessage<QueryClassRequest> = /*@__PURE__*/
  messageDesc(file_coreum_asset_nft_v1_query, 2);

/**
 * QueryClassResponse is response type for the Query/Class RPC method.
 *
 * @generated from message coreum.asset.nft.v1.QueryClassResponse
 */
export type QueryClassResponse = Message<"coreum.asset.nft.v1.QueryClassResponse"> & {
  /**
   * @generated from field: coreum.asset.nft.v1.Class class = 1;
   */
  class?: Class;
};

/**
 * Describes the message coreum.asset.nft.v1.QueryClassResponse.
 * Use `create(QueryClassResponseSchema)` to create a new message.
 */
export const QueryClassResponseSchema: GenMessage<QueryClassResponse> = /*@__PURE__*/
  messageDesc(file_coreum_asset_nft_v1_query, 3);

/**
 * QueryTokenRequest is request type for the Query/Classes RPC method.
 *
 * @generated from message coreum.asset.nft.v1.QueryClassesRequest
 */
export type QueryClassesRequest = Message<"coreum.asset.nft.v1.QueryClassesRequest"> & {
  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  /**
   * @generated from field: string issuer = 2;
   */
  issuer: string;
};

/**
 * Describes the message coreum.asset.nft.v1.QueryClassesRequest.
 * Use `create(QueryClassesRequestSchema)` to create a new message.
 */
export const QueryClassesRequestSchema: GenMessage<QueryClassesRequest> = /*@__PURE__*/
  messageDesc(file_coreum_asset_nft_v1_query, 4);

/**
 * QueryClassResponse is response type for the Query/Classes RPC method.
 *
 * @generated from message coreum.asset.nft.v1.QueryClassesResponse
 */
export type QueryClassesResponse = Message<"coreum.asset.nft.v1.QueryClassesResponse"> & {
  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 1;
   */
  pagination?: PageResponse;

  /**
   * @generated from field: repeated coreum.asset.nft.v1.Class classes = 2;
   */
  classes: Class[];
};

/**
 * Describes the message coreum.asset.nft.v1.QueryClassesResponse.
 * Use `create(QueryClassesResponseSchema)` to create a new message.
 */
export const QueryClassesResponseSchema: GenMessage<QueryClassesResponse> = /*@__PURE__*/
  messageDesc(file_coreum_asset_nft_v1_query, 5);

/**
 * @generated from message coreum.asset.nft.v1.QueryFrozenRequest
 */
export type QueryFrozenRequest = Message<"coreum.asset.nft.v1.QueryFrozenRequest"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string class_id = 2;
   */
  classId: string;
};

/**
 * Describes the message coreum.asset.nft.v1.QueryFrozenRequest.
 * Use `create(QueryFrozenRequestSchema)` to create a new message.
 */
export const QueryFrozenRequestSchema: GenMessage<QueryFrozenRequest> = /*@__PURE__*/
  messageDesc(file_coreum_asset_nft_v1_query, 6);

/**
 * @generated from message coreum.asset.nft.v1.QueryFrozenResponse
 */
export type QueryFrozenResponse = Message<"coreum.asset.nft.v1.QueryFrozenResponse"> & {
  /**
   * @generated from field: bool frozen = 1;
   */
  frozen: boolean;
};

/**
 * Describes the message coreum.asset.nft.v1.QueryFrozenResponse.
 * Use `create(QueryFrozenResponseSchema)` to create a new message.
 */
export const QueryFrozenResponseSchema: GenMessage<QueryFrozenResponse> = /*@__PURE__*/
  messageDesc(file_coreum_asset_nft_v1_query, 7);

/**
 * @generated from message coreum.asset.nft.v1.QueryClassFrozenRequest
 */
export type QueryClassFrozenRequest = Message<"coreum.asset.nft.v1.QueryClassFrozenRequest"> & {
  /**
   * @generated from field: string class_id = 1;
   */
  classId: string;

  /**
   * @generated from field: string account = 2;
   */
  account: string;
};

/**
 * Describes the message coreum.asset.nft.v1.QueryClassFrozenRequest.
 * Use `create(QueryClassFrozenRequestSchema)` to create a new message.
 */
export const QueryClassFrozenRequestSchema: GenMessage<QueryClassFrozenRequest> = /*@__PURE__*/
  messageDesc(file_coreum_asset_nft_v1_query, 8);

/**
 * @generated from message coreum.asset.nft.v1.QueryClassFrozenResponse
 */
export type QueryClassFrozenResponse = Message<"coreum.asset.nft.v1.QueryClassFrozenResponse"> & {
  /**
   * @generated from field: bool frozen = 1;
   */
  frozen: boolean;
};

/**
 * Describes the message coreum.asset.nft.v1.QueryClassFrozenResponse.
 * Use `create(QueryClassFrozenResponseSchema)` to create a new message.
 */
export const QueryClassFrozenResponseSchema: GenMessage<QueryClassFrozenResponse> = /*@__PURE__*/
  messageDesc(file_coreum_asset_nft_v1_query, 9);

/**
 * @generated from message coreum.asset.nft.v1.QueryWhitelistedRequest
 */
export type QueryWhitelistedRequest = Message<"coreum.asset.nft.v1.QueryWhitelistedRequest"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string class_id = 2;
   */
  classId: string;

  /**
   * @generated from field: string account = 3;
   */
  account: string;
};

/**
 * Describes the message coreum.asset.nft.v1.QueryWhitelistedRequest.
 * Use `create(QueryWhitelistedRequestSchema)` to create a new message.
 */
export const QueryWhitelistedRequestSchema: GenMessage<QueryWhitelistedRequest> = /*@__PURE__*/
  messageDesc(file_coreum_asset_nft_v1_query, 10);

/**
 * @generated from message coreum.asset.nft.v1.QueryWhitelistedResponse
 */
export type QueryWhitelistedResponse = Message<"coreum.asset.nft.v1.QueryWhitelistedResponse"> & {
  /**
   * @generated from field: bool whitelisted = 1;
   */
  whitelisted: boolean;
};

/**
 * Describes the message coreum.asset.nft.v1.QueryWhitelistedResponse.
 * Use `create(QueryWhitelistedResponseSchema)` to create a new message.
 */
export const QueryWhitelistedResponseSchema: GenMessage<QueryWhitelistedResponse> = /*@__PURE__*/
  messageDesc(file_coreum_asset_nft_v1_query, 11);

/**
 * @generated from message coreum.asset.nft.v1.QueryWhitelistedAccountsForNFTRequest
 */
export type QueryWhitelistedAccountsForNFTRequest = Message<"coreum.asset.nft.v1.QueryWhitelistedAccountsForNFTRequest"> & {
  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  /**
   * @generated from field: string id = 2;
   */
  id: string;

  /**
   * @generated from field: string class_id = 3;
   */
  classId: string;
};

/**
 * Describes the message coreum.asset.nft.v1.QueryWhitelistedAccountsForNFTRequest.
 * Use `create(QueryWhitelistedAccountsForNFTRequestSchema)` to create a new message.
 */
export const QueryWhitelistedAccountsForNFTRequestSchema: GenMessage<QueryWhitelistedAccountsForNFTRequest> = /*@__PURE__*/
  messageDesc(file_coreum_asset_nft_v1_query, 12);

/**
 * @generated from message coreum.asset.nft.v1.QueryWhitelistedAccountsForNFTResponse
 */
export type QueryWhitelistedAccountsForNFTResponse = Message<"coreum.asset.nft.v1.QueryWhitelistedAccountsForNFTResponse"> & {
  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 1;
   */
  pagination?: PageResponse;

  /**
   * @generated from field: repeated string accounts = 2;
   */
  accounts: string[];
};

/**
 * Describes the message coreum.asset.nft.v1.QueryWhitelistedAccountsForNFTResponse.
 * Use `create(QueryWhitelistedAccountsForNFTResponseSchema)` to create a new message.
 */
export const QueryWhitelistedAccountsForNFTResponseSchema: GenMessage<QueryWhitelistedAccountsForNFTResponse> = /*@__PURE__*/
  messageDesc(file_coreum_asset_nft_v1_query, 13);

/**
 * @generated from message coreum.asset.nft.v1.QueryClassWhitelistedAccountsRequest
 */
export type QueryClassWhitelistedAccountsRequest = Message<"coreum.asset.nft.v1.QueryClassWhitelistedAccountsRequest"> & {
  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  /**
   * @generated from field: string class_id = 2;
   */
  classId: string;
};

/**
 * Describes the message coreum.asset.nft.v1.QueryClassWhitelistedAccountsRequest.
 * Use `create(QueryClassWhitelistedAccountsRequestSchema)` to create a new message.
 */
export const QueryClassWhitelistedAccountsRequestSchema: GenMessage<QueryClassWhitelistedAccountsRequest> = /*@__PURE__*/
  messageDesc(file_coreum_asset_nft_v1_query, 14);

/**
 * @generated from message coreum.asset.nft.v1.QueryClassWhitelistedAccountsResponse
 */
export type QueryClassWhitelistedAccountsResponse = Message<"coreum.asset.nft.v1.QueryClassWhitelistedAccountsResponse"> & {
  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 1;
   */
  pagination?: PageResponse;

  /**
   * @generated from field: repeated string accounts = 2;
   */
  accounts: string[];
};

/**
 * Describes the message coreum.asset.nft.v1.QueryClassWhitelistedAccountsResponse.
 * Use `create(QueryClassWhitelistedAccountsResponseSchema)` to create a new message.
 */
export const QueryClassWhitelistedAccountsResponseSchema: GenMessage<QueryClassWhitelistedAccountsResponse> = /*@__PURE__*/
  messageDesc(file_coreum_asset_nft_v1_query, 15);

/**
 * @generated from message coreum.asset.nft.v1.QueryClassFrozenAccountsRequest
 */
export type QueryClassFrozenAccountsRequest = Message<"coreum.asset.nft.v1.QueryClassFrozenAccountsRequest"> & {
  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  /**
   * @generated from field: string class_id = 2;
   */
  classId: string;
};

/**
 * Describes the message coreum.asset.nft.v1.QueryClassFrozenAccountsRequest.
 * Use `create(QueryClassFrozenAccountsRequestSchema)` to create a new message.
 */
export const QueryClassFrozenAccountsRequestSchema: GenMessage<QueryClassFrozenAccountsRequest> = /*@__PURE__*/
  messageDesc(file_coreum_asset_nft_v1_query, 16);

/**
 * @generated from message coreum.asset.nft.v1.QueryClassFrozenAccountsResponse
 */
export type QueryClassFrozenAccountsResponse = Message<"coreum.asset.nft.v1.QueryClassFrozenAccountsResponse"> & {
  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 1;
   */
  pagination?: PageResponse;

  /**
   * @generated from field: repeated string accounts = 2;
   */
  accounts: string[];
};

/**
 * Describes the message coreum.asset.nft.v1.QueryClassFrozenAccountsResponse.
 * Use `create(QueryClassFrozenAccountsResponseSchema)` to create a new message.
 */
export const QueryClassFrozenAccountsResponseSchema: GenMessage<QueryClassFrozenAccountsResponse> = /*@__PURE__*/
  messageDesc(file_coreum_asset_nft_v1_query, 17);

/**
 * @generated from message coreum.asset.nft.v1.QueryBurntNFTRequest
 */
export type QueryBurntNFTRequest = Message<"coreum.asset.nft.v1.QueryBurntNFTRequest"> & {
  /**
   * @generated from field: string class_id = 1;
   */
  classId: string;

  /**
   * @generated from field: string nft_id = 2;
   */
  nftId: string;
};

/**
 * Describes the message coreum.asset.nft.v1.QueryBurntNFTRequest.
 * Use `create(QueryBurntNFTRequestSchema)` to create a new message.
 */
export const QueryBurntNFTRequestSchema: GenMessage<QueryBurntNFTRequest> = /*@__PURE__*/
  messageDesc(file_coreum_asset_nft_v1_query, 18);

/**
 * @generated from message coreum.asset.nft.v1.QueryBurntNFTResponse
 */
export type QueryBurntNFTResponse = Message<"coreum.asset.nft.v1.QueryBurntNFTResponse"> & {
  /**
   * @generated from field: bool burnt = 1;
   */
  burnt: boolean;
};

/**
 * Describes the message coreum.asset.nft.v1.QueryBurntNFTResponse.
 * Use `create(QueryBurntNFTResponseSchema)` to create a new message.
 */
export const QueryBurntNFTResponseSchema: GenMessage<QueryBurntNFTResponse> = /*@__PURE__*/
  messageDesc(file_coreum_asset_nft_v1_query, 19);

/**
 * @generated from message coreum.asset.nft.v1.QueryBurntNFTsInClassRequest
 */
export type QueryBurntNFTsInClassRequest = Message<"coreum.asset.nft.v1.QueryBurntNFTsInClassRequest"> & {
  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  /**
   * @generated from field: string class_id = 2;
   */
  classId: string;
};

/**
 * Describes the message coreum.asset.nft.v1.QueryBurntNFTsInClassRequest.
 * Use `create(QueryBurntNFTsInClassRequestSchema)` to create a new message.
 */
export const QueryBurntNFTsInClassRequestSchema: GenMessage<QueryBurntNFTsInClassRequest> = /*@__PURE__*/
  messageDesc(file_coreum_asset_nft_v1_query, 20);

/**
 * @generated from message coreum.asset.nft.v1.QueryBurntNFTsInClassResponse
 */
export type QueryBurntNFTsInClassResponse = Message<"coreum.asset.nft.v1.QueryBurntNFTsInClassResponse"> & {
  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 1;
   */
  pagination?: PageResponse;

  /**
   * @generated from field: repeated string nft_ids = 2;
   */
  nftIds: string[];
};

/**
 * Describes the message coreum.asset.nft.v1.QueryBurntNFTsInClassResponse.
 * Use `create(QueryBurntNFTsInClassResponseSchema)` to create a new message.
 */
export const QueryBurntNFTsInClassResponseSchema: GenMessage<QueryBurntNFTsInClassResponse> = /*@__PURE__*/
  messageDesc(file_coreum_asset_nft_v1_query, 21);

/**
 * Query defines the gRPC querier service.
 *
 * @generated from service coreum.asset.nft.v1.Query
 */
export const Query: GenService<{
  /**
   * Params queries the parameters of x/asset/nft module.
   *
   * @generated from rpc coreum.asset.nft.v1.Query.Params
   */
  params: {
    methodKind: "unary";
    input: typeof QueryParamsRequestSchema;
    output: typeof QueryParamsResponseSchema;
  },
  /**
   * Class queries the non-fungible token class of the module.
   *
   * @generated from rpc coreum.asset.nft.v1.Query.Class
   */
  class: {
    methodKind: "unary";
    input: typeof QueryClassRequestSchema;
    output: typeof QueryClassResponseSchema;
  },
  /**
   * Classes queries the non-fungible token classes of the module.
   *
   * @generated from rpc coreum.asset.nft.v1.Query.Classes
   */
  classes: {
    methodKind: "unary";
    input: typeof QueryClassesRequestSchema;
    output: typeof QueryClassesResponseSchema;
  },
  /**
   * Frozen queries to check if an NFT is frozen or not.
   *
   * @generated from rpc coreum.asset.nft.v1.Query.Frozen
   */
  frozen: {
    methodKind: "unary";
    input: typeof QueryFrozenRequestSchema;
    output: typeof QueryFrozenResponseSchema;
  },
  /**
   * ClassFrozen queries to check if an account if frozen for an NFT class.
   *
   * @generated from rpc coreum.asset.nft.v1.Query.ClassFrozen
   */
  classFrozen: {
    methodKind: "unary";
    input: typeof QueryClassFrozenRequestSchema;
    output: typeof QueryClassFrozenResponseSchema;
  },
  /**
   * QueryClassFrozenAccountsRequest returns the list of accounts which are frozen to hold NFTs in this class.
   *
   * @generated from rpc coreum.asset.nft.v1.Query.ClassFrozenAccounts
   */
  classFrozenAccounts: {
    methodKind: "unary";
    input: typeof QueryClassFrozenAccountsRequestSchema;
    output: typeof QueryClassFrozenAccountsResponseSchema;
  },
  /**
   * Whitelisted queries to check if an account is whitelited to hold an NFT or not.
   *
   * @generated from rpc coreum.asset.nft.v1.Query.Whitelisted
   */
  whitelisted: {
    methodKind: "unary";
    input: typeof QueryWhitelistedRequestSchema;
    output: typeof QueryWhitelistedResponseSchema;
  },
  /**
   * WhitelistedAccountsForNFT returns the list of accounts which are whitelisted to hold this NFT.
   *
   * @generated from rpc coreum.asset.nft.v1.Query.WhitelistedAccountsForNFT
   */
  whitelistedAccountsForNFT: {
    methodKind: "unary";
    input: typeof QueryWhitelistedAccountsForNFTRequestSchema;
    output: typeof QueryWhitelistedAccountsForNFTResponseSchema;
  },
  /**
   * ClassWhitelistedAccounts returns the list of accounts which are whitelisted to hold NFTs in this class.
   *
   * @generated from rpc coreum.asset.nft.v1.Query.ClassWhitelistedAccounts
   */
  classWhitelistedAccounts: {
    methodKind: "unary";
    input: typeof QueryClassWhitelistedAccountsRequestSchema;
    output: typeof QueryClassWhitelistedAccountsResponseSchema;
  },
  /**
   * BurntNFTsInClass checks if an nft if is in burnt NFTs list.
   *
   * @generated from rpc coreum.asset.nft.v1.Query.BurntNFT
   */
  burntNFT: {
    methodKind: "unary";
    input: typeof QueryBurntNFTRequestSchema;
    output: typeof QueryBurntNFTResponseSchema;
  },
  /**
   * BurntNFTsInClass returns the list of burnt nfts in a class.
   *
   * @generated from rpc coreum.asset.nft.v1.Query.BurntNFTsInClass
   */
  burntNFTsInClass: {
    methodKind: "unary";
    input: typeof QueryBurntNFTsInClassRequestSchema;
    output: typeof QueryBurntNFTsInClassResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_coreum_asset_nft_v1_query, 0);

