// @generated by protoc-gen-es v2.0.0 with parameter "target=ts"
// @generated from file cosmos/circuit/v1/tx.proto (package cosmos.circuit.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_cosmos_msg_v1_msg } from "../../msg/v1/msg_pb";
import type { Permissions } from "./types_pb";
import { file_cosmos_circuit_v1_types } from "./types_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file cosmos/circuit/v1/tx.proto.
 */
export const file_cosmos_circuit_v1_tx: GenFile = /*@__PURE__*/
  fileDesc("Chpjb3Ntb3MvY2lyY3VpdC92MS90eC5wcm90bxIRY29zbW9zLmNpcmN1aXQudjEigQEKGk1zZ0F1dGhvcml6ZUNpcmN1aXRCcmVha2VyEg8KB2dyYW50ZXIYASABKAkSDwoHZ3JhbnRlZRgCIAEoCRIzCgtwZXJtaXNzaW9ucxgDIAEoCzIeLmNvc21vcy5jaXJjdWl0LnYxLlBlcm1pc3Npb25zOgyC57AqB2dyYW50ZXIiNQoiTXNnQXV0aG9yaXplQ2lyY3VpdEJyZWFrZXJSZXNwb25zZRIPCgdzdWNjZXNzGAEgASgIIlEKFU1zZ1RyaXBDaXJjdWl0QnJlYWtlchIRCglhdXRob3JpdHkYASABKAkSFQoNbXNnX3R5cGVfdXJscxgCIAMoCToOguewKglhdXRob3JpdHkiMAodTXNnVHJpcENpcmN1aXRCcmVha2VyUmVzcG9uc2USDwoHc3VjY2VzcxgBIAEoCCJSChZNc2dSZXNldENpcmN1aXRCcmVha2VyEhEKCWF1dGhvcml0eRgBIAEoCRIVCg1tc2dfdHlwZV91cmxzGAMgAygJOg6C57AqCWF1dGhvcml0eSIxCh5Nc2dSZXNldENpcmN1aXRCcmVha2VyUmVzcG9uc2USDwoHc3VjY2VzcxgBIAEoCDL0AgoDTXNnEn8KF0F1dGhvcml6ZUNpcmN1aXRCcmVha2VyEi0uY29zbW9zLmNpcmN1aXQudjEuTXNnQXV0aG9yaXplQ2lyY3VpdEJyZWFrZXIaNS5jb3Ntb3MuY2lyY3VpdC52MS5Nc2dBdXRob3JpemVDaXJjdWl0QnJlYWtlclJlc3BvbnNlEnAKElRyaXBDaXJjdWl0QnJlYWtlchIoLmNvc21vcy5jaXJjdWl0LnYxLk1zZ1RyaXBDaXJjdWl0QnJlYWtlchowLmNvc21vcy5jaXJjdWl0LnYxLk1zZ1RyaXBDaXJjdWl0QnJlYWtlclJlc3BvbnNlEnMKE1Jlc2V0Q2lyY3VpdEJyZWFrZXISKS5jb3Ntb3MuY2lyY3VpdC52MS5Nc2dSZXNldENpcmN1aXRCcmVha2VyGjEuY29zbW9zLmNpcmN1aXQudjEuTXNnUmVzZXRDaXJjdWl0QnJlYWtlclJlc3BvbnNlGgWA57AqAUIeWhxjb3Ntb3NzZGsuaW8veC9jaXJjdWl0L3R5cGVzYgZwcm90bzM", [file_cosmos_msg_v1_msg, file_cosmos_circuit_v1_types]);

/**
 * MsgAuthorizeCircuitBreaker defines the Msg/AuthorizeCircuitBreaker request type.
 *
 * @generated from message cosmos.circuit.v1.MsgAuthorizeCircuitBreaker
 */
export type MsgAuthorizeCircuitBreaker = Message<"cosmos.circuit.v1.MsgAuthorizeCircuitBreaker"> & {
  /**
   * granter is the granter of the circuit breaker permissions and must have
   * LEVEL_SUPER_ADMIN.
   *
   * @generated from field: string granter = 1;
   */
  granter: string;

  /**
   * grantee is the account authorized with the provided permissions.
   *
   * @generated from field: string grantee = 2;
   */
  grantee: string;

  /**
   * permissions are the circuit breaker permissions that the grantee receives.
   * These will overwrite any existing permissions. LEVEL_NONE_UNSPECIFIED can
   * be specified to revoke all permissions.
   *
   * @generated from field: cosmos.circuit.v1.Permissions permissions = 3;
   */
  permissions?: Permissions;
};

/**
 * Describes the message cosmos.circuit.v1.MsgAuthorizeCircuitBreaker.
 * Use `create(MsgAuthorizeCircuitBreakerSchema)` to create a new message.
 */
export const MsgAuthorizeCircuitBreakerSchema: GenMessage<MsgAuthorizeCircuitBreaker> = /*@__PURE__*/
  messageDesc(file_cosmos_circuit_v1_tx, 0);

/**
 * MsgAuthorizeCircuitBreakerResponse defines the Msg/AuthorizeCircuitBreaker response type.
 *
 * @generated from message cosmos.circuit.v1.MsgAuthorizeCircuitBreakerResponse
 */
export type MsgAuthorizeCircuitBreakerResponse = Message<"cosmos.circuit.v1.MsgAuthorizeCircuitBreakerResponse"> & {
  /**
   * @generated from field: bool success = 1;
   */
  success: boolean;
};

/**
 * Describes the message cosmos.circuit.v1.MsgAuthorizeCircuitBreakerResponse.
 * Use `create(MsgAuthorizeCircuitBreakerResponseSchema)` to create a new message.
 */
export const MsgAuthorizeCircuitBreakerResponseSchema: GenMessage<MsgAuthorizeCircuitBreakerResponse> = /*@__PURE__*/
  messageDesc(file_cosmos_circuit_v1_tx, 1);

/**
 * MsgTripCircuitBreaker defines the Msg/TripCircuitBreaker request type.
 *
 * @generated from message cosmos.circuit.v1.MsgTripCircuitBreaker
 */
export type MsgTripCircuitBreaker = Message<"cosmos.circuit.v1.MsgTripCircuitBreaker"> & {
  /**
   * authority is the account authorized to trip the circuit breaker.
   *
   * @generated from field: string authority = 1;
   */
  authority: string;

  /**
   * msg_type_urls specifies a list of type URLs to immediately stop processing.
   * IF IT IS LEFT EMPTY, ALL MSG PROCESSING WILL STOP IMMEDIATELY.
   * This value is validated against the authority's permissions and if the
   * authority does not have permissions to trip the specified msg type URLs
   * (or all URLs), the operation will fail.
   *
   * @generated from field: repeated string msg_type_urls = 2;
   */
  msgTypeUrls: string[];
};

/**
 * Describes the message cosmos.circuit.v1.MsgTripCircuitBreaker.
 * Use `create(MsgTripCircuitBreakerSchema)` to create a new message.
 */
export const MsgTripCircuitBreakerSchema: GenMessage<MsgTripCircuitBreaker> = /*@__PURE__*/
  messageDesc(file_cosmos_circuit_v1_tx, 2);

/**
 * MsgTripCircuitBreakerResponse defines the Msg/TripCircuitBreaker response type.
 *
 * @generated from message cosmos.circuit.v1.MsgTripCircuitBreakerResponse
 */
export type MsgTripCircuitBreakerResponse = Message<"cosmos.circuit.v1.MsgTripCircuitBreakerResponse"> & {
  /**
   * @generated from field: bool success = 1;
   */
  success: boolean;
};

/**
 * Describes the message cosmos.circuit.v1.MsgTripCircuitBreakerResponse.
 * Use `create(MsgTripCircuitBreakerResponseSchema)` to create a new message.
 */
export const MsgTripCircuitBreakerResponseSchema: GenMessage<MsgTripCircuitBreakerResponse> = /*@__PURE__*/
  messageDesc(file_cosmos_circuit_v1_tx, 3);

/**
 * MsgResetCircuitBreaker defines the Msg/ResetCircuitBreaker request type.
 *
 * @generated from message cosmos.circuit.v1.MsgResetCircuitBreaker
 */
export type MsgResetCircuitBreaker = Message<"cosmos.circuit.v1.MsgResetCircuitBreaker"> & {
  /**
   * authority is the account authorized to trip or reset the circuit breaker.
   *
   * @generated from field: string authority = 1;
   */
  authority: string;

  /**
   * msg_type_urls specifies a list of Msg type URLs to resume processing. If
   * it is left empty all Msg processing for type URLs that the account is
   * authorized to trip will resume.
   *
   * @generated from field: repeated string msg_type_urls = 3;
   */
  msgTypeUrls: string[];
};

/**
 * Describes the message cosmos.circuit.v1.MsgResetCircuitBreaker.
 * Use `create(MsgResetCircuitBreakerSchema)` to create a new message.
 */
export const MsgResetCircuitBreakerSchema: GenMessage<MsgResetCircuitBreaker> = /*@__PURE__*/
  messageDesc(file_cosmos_circuit_v1_tx, 4);

/**
 * MsgResetCircuitBreakerResponse defines the Msg/ResetCircuitBreaker response type.
 *
 * @generated from message cosmos.circuit.v1.MsgResetCircuitBreakerResponse
 */
export type MsgResetCircuitBreakerResponse = Message<"cosmos.circuit.v1.MsgResetCircuitBreakerResponse"> & {
  /**
   * @generated from field: bool success = 1;
   */
  success: boolean;
};

/**
 * Describes the message cosmos.circuit.v1.MsgResetCircuitBreakerResponse.
 * Use `create(MsgResetCircuitBreakerResponseSchema)` to create a new message.
 */
export const MsgResetCircuitBreakerResponseSchema: GenMessage<MsgResetCircuitBreakerResponse> = /*@__PURE__*/
  messageDesc(file_cosmos_circuit_v1_tx, 5);

/**
 * Msg defines the circuit Msg service.
 *
 * @generated from service cosmos.circuit.v1.Msg
 */
export const Msg: GenService<{
  /**
   * AuthorizeCircuitBreaker allows a super-admin to grant (or revoke) another
   * account's circuit breaker permissions.
   *
   * @generated from rpc cosmos.circuit.v1.Msg.AuthorizeCircuitBreaker
   */
  authorizeCircuitBreaker: {
    methodKind: "unary";
    input: typeof MsgAuthorizeCircuitBreakerSchema;
    output: typeof MsgAuthorizeCircuitBreakerResponseSchema;
  },
  /**
   * TripCircuitBreaker pauses processing of Msg's in the state machine.
   *
   * @generated from rpc cosmos.circuit.v1.Msg.TripCircuitBreaker
   */
  tripCircuitBreaker: {
    methodKind: "unary";
    input: typeof MsgTripCircuitBreakerSchema;
    output: typeof MsgTripCircuitBreakerResponseSchema;
  },
  /**
   * ResetCircuitBreaker resumes processing of Msg's in the state machine that
   * have been been paused using TripCircuitBreaker.
   *
   * @generated from rpc cosmos.circuit.v1.Msg.ResetCircuitBreaker
   */
  resetCircuitBreaker: {
    methodKind: "unary";
    input: typeof MsgResetCircuitBreakerSchema;
    output: typeof MsgResetCircuitBreakerResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_cosmos_circuit_v1_tx, 0);

