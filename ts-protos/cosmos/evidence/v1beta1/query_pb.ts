// @generated by protoc-gen-es v2.0.0 with parameter "target=ts"
// @generated from file cosmos/evidence/v1beta1/query.proto (package cosmos.evidence.v1beta1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import type { PageRequest, PageResponse } from "../../base/query/v1beta1/pagination_pb";
import { file_cosmos_base_query_v1beta1_pagination } from "../../base/query/v1beta1/pagination_pb";
import type { Any } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_any } from "@bufbuild/protobuf/wkt";
import { file_google_api_annotations } from "../../../google/api/annotations_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file cosmos/evidence/v1beta1/query.proto.
 */
export const file_cosmos_evidence_v1beta1_query: GenFile = /*@__PURE__*/
  fileDesc("CiNjb3Ntb3MvZXZpZGVuY2UvdjFiZXRhMS9xdWVyeS5wcm90bxIXY29zbW9zLmV2aWRlbmNlLnYxYmV0YTEiPwoUUXVlcnlFdmlkZW5jZVJlcXVlc3QSGQoNZXZpZGVuY2VfaGFzaBgBIAEoDEICGAESDAoEaGFzaBgCIAEoCSI/ChVRdWVyeUV2aWRlbmNlUmVzcG9uc2USJgoIZXZpZGVuY2UYASABKAsyFC5nb29nbGUucHJvdG9idWYuQW55IlUKF1F1ZXJ5QWxsRXZpZGVuY2VSZXF1ZXN0EjoKCnBhZ2luYXRpb24YASABKAsyJi5jb3Ntb3MuYmFzZS5xdWVyeS52MWJldGExLlBhZ2VSZXF1ZXN0In8KGFF1ZXJ5QWxsRXZpZGVuY2VSZXNwb25zZRImCghldmlkZW5jZRgBIAMoCzIULmdvb2dsZS5wcm90b2J1Zi5BbnkSOwoKcGFnaW5hdGlvbhgCIAEoCzInLmNvc21vcy5iYXNlLnF1ZXJ5LnYxYmV0YTEuUGFnZVJlc3BvbnNlMsUCCgVRdWVyeRKbAQoIRXZpZGVuY2USLS5jb3Ntb3MuZXZpZGVuY2UudjFiZXRhMS5RdWVyeUV2aWRlbmNlUmVxdWVzdBouLmNvc21vcy5ldmlkZW5jZS52MWJldGExLlF1ZXJ5RXZpZGVuY2VSZXNwb25zZSIwgtPkkwIqEigvY29zbW9zL2V2aWRlbmNlL3YxYmV0YTEvZXZpZGVuY2Uve2hhc2h9Ep0BCgtBbGxFdmlkZW5jZRIwLmNvc21vcy5ldmlkZW5jZS52MWJldGExLlF1ZXJ5QWxsRXZpZGVuY2VSZXF1ZXN0GjEuY29zbW9zLmV2aWRlbmNlLnYxYmV0YTEuUXVlcnlBbGxFdmlkZW5jZVJlc3BvbnNlIimC0+STAiMSIS9jb3Ntb3MvZXZpZGVuY2UvdjFiZXRhMS9ldmlkZW5jZUIfWh1jb3Ntb3NzZGsuaW8veC9ldmlkZW5jZS90eXBlc2IGcHJvdG8z", [file_cosmos_base_query_v1beta1_pagination, file_google_protobuf_any, file_google_api_annotations]);

/**
 * QueryEvidenceRequest is the request type for the Query/Evidence RPC method.
 *
 * @generated from message cosmos.evidence.v1beta1.QueryEvidenceRequest
 */
export type QueryEvidenceRequest = Message<"cosmos.evidence.v1beta1.QueryEvidenceRequest"> & {
  /**
   * evidence_hash defines the hash of the requested evidence.
   * Deprecated: Use hash, a HEX encoded string, instead.
   *
   * @generated from field: bytes evidence_hash = 1 [deprecated = true];
   * @deprecated
   */
  evidenceHash: Uint8Array;

  /**
   * hash defines the evidence hash of the requested evidence.
   *
   * Since: cosmos-sdk 0.47
   *
   * @generated from field: string hash = 2;
   */
  hash: string;
};

/**
 * Describes the message cosmos.evidence.v1beta1.QueryEvidenceRequest.
 * Use `create(QueryEvidenceRequestSchema)` to create a new message.
 */
export const QueryEvidenceRequestSchema: GenMessage<QueryEvidenceRequest> = /*@__PURE__*/
  messageDesc(file_cosmos_evidence_v1beta1_query, 0);

/**
 * QueryEvidenceResponse is the response type for the Query/Evidence RPC method.
 *
 * @generated from message cosmos.evidence.v1beta1.QueryEvidenceResponse
 */
export type QueryEvidenceResponse = Message<"cosmos.evidence.v1beta1.QueryEvidenceResponse"> & {
  /**
   * evidence returns the requested evidence.
   *
   * @generated from field: google.protobuf.Any evidence = 1;
   */
  evidence?: Any;
};

/**
 * Describes the message cosmos.evidence.v1beta1.QueryEvidenceResponse.
 * Use `create(QueryEvidenceResponseSchema)` to create a new message.
 */
export const QueryEvidenceResponseSchema: GenMessage<QueryEvidenceResponse> = /*@__PURE__*/
  messageDesc(file_cosmos_evidence_v1beta1_query, 1);

/**
 * QueryEvidenceRequest is the request type for the Query/AllEvidence RPC
 * method.
 *
 * @generated from message cosmos.evidence.v1beta1.QueryAllEvidenceRequest
 */
export type QueryAllEvidenceRequest = Message<"cosmos.evidence.v1beta1.QueryAllEvidenceRequest"> & {
  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;
};

/**
 * Describes the message cosmos.evidence.v1beta1.QueryAllEvidenceRequest.
 * Use `create(QueryAllEvidenceRequestSchema)` to create a new message.
 */
export const QueryAllEvidenceRequestSchema: GenMessage<QueryAllEvidenceRequest> = /*@__PURE__*/
  messageDesc(file_cosmos_evidence_v1beta1_query, 2);

/**
 * QueryAllEvidenceResponse is the response type for the Query/AllEvidence RPC
 * method.
 *
 * @generated from message cosmos.evidence.v1beta1.QueryAllEvidenceResponse
 */
export type QueryAllEvidenceResponse = Message<"cosmos.evidence.v1beta1.QueryAllEvidenceResponse"> & {
  /**
   * evidence returns all evidences.
   *
   * @generated from field: repeated google.protobuf.Any evidence = 1;
   */
  evidence: Any[];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;
};

/**
 * Describes the message cosmos.evidence.v1beta1.QueryAllEvidenceResponse.
 * Use `create(QueryAllEvidenceResponseSchema)` to create a new message.
 */
export const QueryAllEvidenceResponseSchema: GenMessage<QueryAllEvidenceResponse> = /*@__PURE__*/
  messageDesc(file_cosmos_evidence_v1beta1_query, 3);

/**
 * Query defines the gRPC querier service.
 *
 * @generated from service cosmos.evidence.v1beta1.Query
 */
export const Query: GenService<{
  /**
   * Evidence queries evidence based on evidence hash.
   *
   * @generated from rpc cosmos.evidence.v1beta1.Query.Evidence
   */
  evidence: {
    methodKind: "unary";
    input: typeof QueryEvidenceRequestSchema;
    output: typeof QueryEvidenceResponseSchema;
  },
  /**
   * AllEvidence queries all evidence.
   *
   * @generated from rpc cosmos.evidence.v1beta1.Query.AllEvidence
   */
  allEvidence: {
    methodKind: "unary";
    input: typeof QueryAllEvidenceRequestSchema;
    output: typeof QueryAllEvidenceResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_cosmos_evidence_v1beta1_query, 0);

