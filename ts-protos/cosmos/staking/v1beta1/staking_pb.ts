// @generated by protoc-gen-es v2.0.0 with parameter "target=ts"
// @generated from file cosmos/staking/v1beta1/staking.proto (package cosmos.staking.v1beta1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_gogoproto_gogo } from "../../../gogoproto/gogo_pb";
import type { Any, Duration, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_any, file_google_protobuf_duration, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import { file_cosmos_proto_cosmos } from "../../../cosmos_proto/cosmos_pb";
import type { Coin } from "../../base/v1beta1/coin_pb";
import { file_cosmos_base_v1beta1_coin } from "../../base/v1beta1/coin_pb";
import { file_amino_amino } from "../../../amino/amino_pb";
import type { Header } from "../../../tendermint/types/types_pb";
import { file_tendermint_types_types } from "../../../tendermint/types/types_pb";
import type { ValidatorUpdate } from "../../../tendermint/abci/types_pb";
import { file_tendermint_abci_types } from "../../../tendermint/abci/types_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file cosmos/staking/v1beta1/staking.proto.
 */
export const file_cosmos_staking_v1beta1_staking: GenFile = /*@__PURE__*/
  fileDesc("CiRjb3Ntb3Mvc3Rha2luZy92MWJldGExL3N0YWtpbmcucHJvdG8SFmNvc21vcy5zdGFraW5nLnYxYmV0YTEigwEKDkhpc3RvcmljYWxJbmZvEjMKBmhlYWRlchgBIAEoCzIYLnRlbmRlcm1pbnQudHlwZXMuSGVhZGVyQgnI3h8AqOewKgESPAoGdmFsc2V0GAIgAygLMiEuY29zbW9zLnN0YWtpbmcudjFiZXRhMS5WYWxpZGF0b3JCCcjeHwCo57AqASL4AQoPQ29tbWlzc2lvblJhdGVzEkQKBHJhdGUYASABKAlCNsjeHwDa3h8bY29zbW9zc2RrLmlvL21hdGguTGVnYWN5RGVj0rQtCmNvc21vcy5EZWOo57AqARJICghtYXhfcmF0ZRgCIAEoCUI2yN4fANreHxtjb3Ntb3NzZGsuaW8vbWF0aC5MZWdhY3lEZWPStC0KY29zbW9zLkRlY6jnsCoBEk8KD21heF9jaGFuZ2VfcmF0ZRgDIAEoCUI2yN4fANreHxtjb3Ntb3NzZGsuaW8vbWF0aC5MZWdhY3lEZWPStC0KY29zbW9zLkRlY6jnsCoBOgTooB8BIqQBCgpDb21taXNzaW9uElAKEGNvbW1pc3Npb25fcmF0ZXMYASABKAsyJy5jb3Ntb3Muc3Rha2luZy52MWJldGExLkNvbW1pc3Npb25SYXRlc0INyN4fANDeHwGo57AqARI+Cgt1cGRhdGVfdGltZRgCIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCDcjeHwCQ3x8BqOewKgE6BOigHwEicgoLRGVzY3JpcHRpb24SDwoHbW9uaWtlchgBIAEoCRIQCghpZGVudGl0eRgCIAEoCRIPCgd3ZWJzaXRlGAMgASgJEhgKEHNlY3VyaXR5X2NvbnRhY3QYBCABKAkSDwoHZGV0YWlscxgFIAEoCToE6KAfASLMBQoJVmFsaWRhdG9yEjIKEG9wZXJhdG9yX2FkZHJlc3MYASABKAlCGNK0LRRjb3Ntb3MuQWRkcmVzc1N0cmluZxJIChBjb25zZW5zdXNfcHVia2V5GAIgASgLMhQuZ29vZ2xlLnByb3RvYnVmLkFueUIYyrQtFGNvc21vcy5jcnlwdG8uUHViS2V5Eg4KBmphaWxlZBgDIAEoCBIyCgZzdGF0dXMYBCABKA4yIi5jb3Ntb3Muc3Rha2luZy52MWJldGExLkJvbmRTdGF0dXMSOwoGdG9rZW5zGAUgASgJQivI3h8A2t4fFWNvc21vc3Nkay5pby9tYXRoLkludNK0LQpjb3Ntb3MuSW50EksKEGRlbGVnYXRvcl9zaGFyZXMYBiABKAlCMcjeHwDa3h8bY29zbW9zc2RrLmlvL21hdGguTGVnYWN5RGVj0rQtCmNvc21vcy5EZWMSQwoLZGVzY3JpcHRpb24YByABKAsyIy5jb3Ntb3Muc3Rha2luZy52MWJldGExLkRlc2NyaXB0aW9uQgnI3h8AqOewKgESGAoQdW5ib25kaW5nX2hlaWdodBgIIAEoAxJBCg51bmJvbmRpbmdfdGltZRgJIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCDcjeHwCQ3x8BqOewKgESQQoKY29tbWlzc2lvbhgKIAEoCzIiLmNvc21vcy5zdGFraW5nLnYxYmV0YTEuQ29tbWlzc2lvbkIJyN4fAKjnsCoBEkgKE21pbl9zZWxmX2RlbGVnYXRpb24YCyABKAlCK8jeHwDa3h8VY29zbW9zc2RrLmlvL21hdGguSW500rQtCmNvc21vcy5JbnQSIwobdW5ib25kaW5nX29uX2hvbGRfcmVmX2NvdW50GAwgASgDEhUKDXVuYm9uZGluZ19pZHMYDSADKAQ6CIigHwDooB8AIjsKDFZhbEFkZHJlc3NlcxIrCglhZGRyZXNzZXMYASADKAlCGNK0LRRjb3Ntb3MuQWRkcmVzc1N0cmluZyKFAQoGRFZQYWlyEjMKEWRlbGVnYXRvcl9hZGRyZXNzGAEgASgJQhjStC0UY29zbW9zLkFkZHJlc3NTdHJpbmcSPAoRdmFsaWRhdG9yX2FkZHJlc3MYAiABKAlCIdK0LR1jb3Ntb3MuVmFsaWRhdG9yQWRkcmVzc1N0cmluZzoIiKAfAOigHwAiQwoHRFZQYWlycxI4CgVwYWlycxgBIAMoCzIeLmNvc21vcy5zdGFraW5nLnYxYmV0YTEuRFZQYWlyQgnI3h8AqOewKgEizwEKCkRWVlRyaXBsZXQSMwoRZGVsZWdhdG9yX2FkZHJlc3MYASABKAlCGNK0LRRjb3Ntb3MuQWRkcmVzc1N0cmluZxJAChV2YWxpZGF0b3Jfc3JjX2FkZHJlc3MYAiABKAlCIdK0LR1jb3Ntb3MuVmFsaWRhdG9yQWRkcmVzc1N0cmluZxJAChV2YWxpZGF0b3JfZHN0X2FkZHJlc3MYAyABKAlCIdK0LR1jb3Ntb3MuVmFsaWRhdG9yQWRkcmVzc1N0cmluZzoIiKAfAOigHwAiTgoLRFZWVHJpcGxldHMSPwoIdHJpcGxldHMYASADKAsyIi5jb3Ntb3Muc3Rha2luZy52MWJldGExLkRWVlRyaXBsZXRCCcjeHwCo57AqASLMAQoKRGVsZWdhdGlvbhIzChFkZWxlZ2F0b3JfYWRkcmVzcxgBIAEoCUIY0rQtFGNvc21vcy5BZGRyZXNzU3RyaW5nEjwKEXZhbGlkYXRvcl9hZGRyZXNzGAIgASgJQiHStC0dY29zbW9zLlZhbGlkYXRvckFkZHJlc3NTdHJpbmcSQQoGc2hhcmVzGAMgASgJQjHI3h8A2t4fG2Nvc21vc3Nkay5pby9tYXRoLkxlZ2FjeURlY9K0LQpjb3Ntb3MuRGVjOgiIoB8A6KAfACLgAQoTVW5ib25kaW5nRGVsZWdhdGlvbhIzChFkZWxlZ2F0b3JfYWRkcmVzcxgBIAEoCUIY0rQtFGNvc21vcy5BZGRyZXNzU3RyaW5nEjwKEXZhbGlkYXRvcl9hZGRyZXNzGAIgASgJQiHStC0dY29zbW9zLlZhbGlkYXRvckFkZHJlc3NTdHJpbmcSTAoHZW50cmllcxgDIAMoCzIwLmNvc21vcy5zdGFraW5nLnYxYmV0YTEuVW5ib25kaW5nRGVsZWdhdGlvbkVudHJ5QgnI3h8AqOewKgE6CIigHwDooB8AIrwCChhVbmJvbmRpbmdEZWxlZ2F0aW9uRW50cnkSFwoPY3JlYXRpb25faGVpZ2h0GAEgASgDEkIKD2NvbXBsZXRpb25fdGltZRgCIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCDcjeHwCQ3x8BqOewKgESRAoPaW5pdGlhbF9iYWxhbmNlGAMgASgJQivI3h8A2t4fFWNvc21vc3Nkay5pby9tYXRoLkludNK0LQpjb3Ntb3MuSW50EjwKB2JhbGFuY2UYBCABKAlCK8jeHwDa3h8VY29zbW9zc2RrLmlvL21hdGguSW500rQtCmNvc21vcy5JbnQSFAoMdW5ib25kaW5nX2lkGAUgASgEEiMKG3VuYm9uZGluZ19vbl9ob2xkX3JlZl9jb3VudBgGIAEoAzoE6KAfASK+AgoRUmVkZWxlZ2F0aW9uRW50cnkSFwoPY3JlYXRpb25faGVpZ2h0GAEgASgDEkIKD2NvbXBsZXRpb25fdGltZRgCIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCDcjeHwCQ3x8BqOewKgESRAoPaW5pdGlhbF9iYWxhbmNlGAMgASgJQivI3h8A2t4fFWNvc21vc3Nkay5pby9tYXRoLkludNK0LQpjb3Ntb3MuSW50EkUKCnNoYXJlc19kc3QYBCABKAlCMcjeHwDa3h8bY29zbW9zc2RrLmlvL21hdGguTGVnYWN5RGVj0rQtCmNvc21vcy5EZWMSFAoMdW5ib25kaW5nX2lkGAUgASgEEiMKG3VuYm9uZGluZ19vbl9ob2xkX3JlZl9jb3VudBgGIAEoAzoE6KAfASKYAgoMUmVkZWxlZ2F0aW9uEjMKEWRlbGVnYXRvcl9hZGRyZXNzGAEgASgJQhjStC0UY29zbW9zLkFkZHJlc3NTdHJpbmcSQAoVdmFsaWRhdG9yX3NyY19hZGRyZXNzGAIgASgJQiHStC0dY29zbW9zLlZhbGlkYXRvckFkZHJlc3NTdHJpbmcSQAoVdmFsaWRhdG9yX2RzdF9hZGRyZXNzGAMgASgJQiHStC0dY29zbW9zLlZhbGlkYXRvckFkZHJlc3NTdHJpbmcSRQoHZW50cmllcxgEIAMoCzIpLmNvc21vcy5zdGFraW5nLnYxYmV0YTEuUmVkZWxlZ2F0aW9uRW50cnlCCcjeHwCo57AqAToIiKAfAOigHwAiwAIKBlBhcmFtcxJACg51bmJvbmRpbmdfdGltZRgBIAEoCzIZLmdvb2dsZS5wcm90b2J1Zi5EdXJhdGlvbkINyN4fAJjfHwGo57AqARIWCg5tYXhfdmFsaWRhdG9ycxgCIAEoDRITCgttYXhfZW50cmllcxgDIAEoDRIaChJoaXN0b3JpY2FsX2VudHJpZXMYBCABKA0SEgoKYm9uZF9kZW5vbRgFIAEoCRJxChNtaW5fY29tbWlzc2lvbl9yYXRlGAYgASgJQlTI3h8A2t4fG2Nvc21vc3Nkay5pby9tYXRoLkxlZ2FjeURlY/LeHxp5YW1sOiJtaW5fY29tbWlzc2lvbl9yYXRlItK0LQpjb3Ntb3MuRGVjqOewKgE6JOigHwGK57AqG2Nvc21vcy1zZGsveC9zdGFraW5nL1BhcmFtcyKUAQoSRGVsZWdhdGlvblJlc3BvbnNlEkEKCmRlbGVnYXRpb24YASABKAsyIi5jb3Ntb3Muc3Rha2luZy52MWJldGExLkRlbGVnYXRpb25CCcjeHwCo57AqARI1CgdiYWxhbmNlGAIgASgLMhkuY29zbW9zLmJhc2UudjFiZXRhMS5Db2luQgnI3h8AqOewKgE6BOigHwAisQEKGVJlZGVsZWdhdGlvbkVudHJ5UmVzcG9uc2USUAoScmVkZWxlZ2F0aW9uX2VudHJ5GAEgASgLMikuY29zbW9zLnN0YWtpbmcudjFiZXRhMS5SZWRlbGVnYXRpb25FbnRyeUIJyN4fAKjnsCoBEjwKB2JhbGFuY2UYBCABKAlCK8jeHwDa3h8VY29zbW9zc2RrLmlvL21hdGguSW500rQtCmNvc21vcy5JbnQ6BOigHwEisgEKFFJlZGVsZWdhdGlvblJlc3BvbnNlEkUKDHJlZGVsZWdhdGlvbhgBIAEoCzIkLmNvc21vcy5zdGFraW5nLnYxYmV0YTEuUmVkZWxlZ2F0aW9uQgnI3h8AqOewKgESTQoHZW50cmllcxgCIAMoCzIxLmNvc21vcy5zdGFraW5nLnYxYmV0YTEuUmVkZWxlZ2F0aW9uRW50cnlSZXNwb25zZUIJyN4fAKjnsCoBOgTooB8AIswBCgRQb29sEmAKEW5vdF9ib25kZWRfdG9rZW5zGAEgASgJQkXI3h8A2t4fFWNvc21vc3Nkay5pby9tYXRoLkludOreHxFub3RfYm9uZGVkX3Rva2Vuc9K0LQpjb3Ntb3MuSW50qOewKgESWAoNYm9uZGVkX3Rva2VucxgCIAEoCUJByN4fANreHxVjb3Ntb3NzZGsuaW8vbWF0aC5JbnTq3h8NYm9uZGVkX3Rva2Vuc9K0LQpjb3Ntb3MuSW50qOewKgE6COigHwHwoB8BIlAKEFZhbGlkYXRvclVwZGF0ZXMSPAoHdXBkYXRlcxgBIAMoCzIgLnRlbmRlcm1pbnQuYWJjaS5WYWxpZGF0b3JVcGRhdGVCCcjeHwCo57AqASq2AQoKQm9uZFN0YXR1cxIsChdCT05EX1NUQVRVU19VTlNQRUNJRklFRBAAGg+KnSALVW5zcGVjaWZpZWQSJgoUQk9ORF9TVEFUVVNfVU5CT05ERUQQARoMip0gCFVuYm9uZGVkEigKFUJPTkRfU1RBVFVTX1VOQk9ORElORxACGg2KnSAJVW5ib25kaW5nEiIKEkJPTkRfU1RBVFVTX0JPTkRFRBADGgqKnSAGQm9uZGVkGgSIox4AKl0KCkluZnJhY3Rpb24SGgoWSU5GUkFDVElPTl9VTlNQRUNJRklFRBAAEhoKFklORlJBQ1RJT05fRE9VQkxFX1NJR04QARIXChNJTkZSQUNUSU9OX0RPV05USU1FEAJCLlosZ2l0aHViLmNvbS9jb3Ntb3MvY29zbW9zLXNkay94L3N0YWtpbmcvdHlwZXNiBnByb3RvMw", [file_gogoproto_gogo, file_google_protobuf_any, file_google_protobuf_duration, file_google_protobuf_timestamp, file_cosmos_proto_cosmos, file_cosmos_base_v1beta1_coin, file_amino_amino, file_tendermint_types_types, file_tendermint_abci_types]);

/**
 * HistoricalInfo contains header and validator information for a given block.
 * It is stored as part of staking module's state, which persists the `n` most
 * recent HistoricalInfo
 * (`n` is set by the staking module's `historical_entries` parameter).
 *
 * @generated from message cosmos.staking.v1beta1.HistoricalInfo
 */
export type HistoricalInfo = Message<"cosmos.staking.v1beta1.HistoricalInfo"> & {
  /**
   * @generated from field: tendermint.types.Header header = 1;
   */
  header?: Header;

  /**
   * @generated from field: repeated cosmos.staking.v1beta1.Validator valset = 2;
   */
  valset: Validator[];
};

/**
 * Describes the message cosmos.staking.v1beta1.HistoricalInfo.
 * Use `create(HistoricalInfoSchema)` to create a new message.
 */
export const HistoricalInfoSchema: GenMessage<HistoricalInfo> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_staking, 0);

/**
 * CommissionRates defines the initial commission rates to be used for creating
 * a validator.
 *
 * @generated from message cosmos.staking.v1beta1.CommissionRates
 */
export type CommissionRates = Message<"cosmos.staking.v1beta1.CommissionRates"> & {
  /**
   * rate is the commission rate charged to delegators, as a fraction.
   *
   * @generated from field: string rate = 1;
   */
  rate: string;

  /**
   * max_rate defines the maximum commission rate which validator can ever charge, as a fraction.
   *
   * @generated from field: string max_rate = 2;
   */
  maxRate: string;

  /**
   * max_change_rate defines the maximum daily increase of the validator commission, as a fraction.
   *
   * @generated from field: string max_change_rate = 3;
   */
  maxChangeRate: string;
};

/**
 * Describes the message cosmos.staking.v1beta1.CommissionRates.
 * Use `create(CommissionRatesSchema)` to create a new message.
 */
export const CommissionRatesSchema: GenMessage<CommissionRates> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_staking, 1);

/**
 * Commission defines commission parameters for a given validator.
 *
 * @generated from message cosmos.staking.v1beta1.Commission
 */
export type Commission = Message<"cosmos.staking.v1beta1.Commission"> & {
  /**
   * commission_rates defines the initial commission rates to be used for creating a validator.
   *
   * @generated from field: cosmos.staking.v1beta1.CommissionRates commission_rates = 1;
   */
  commissionRates?: CommissionRates;

  /**
   * update_time is the last time the commission rate was changed.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 2;
   */
  updateTime?: Timestamp;
};

/**
 * Describes the message cosmos.staking.v1beta1.Commission.
 * Use `create(CommissionSchema)` to create a new message.
 */
export const CommissionSchema: GenMessage<Commission> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_staking, 2);

/**
 * Description defines a validator description.
 *
 * @generated from message cosmos.staking.v1beta1.Description
 */
export type Description = Message<"cosmos.staking.v1beta1.Description"> & {
  /**
   * moniker defines a human-readable name for the validator.
   *
   * @generated from field: string moniker = 1;
   */
  moniker: string;

  /**
   * identity defines an optional identity signature (ex. UPort or Keybase).
   *
   * @generated from field: string identity = 2;
   */
  identity: string;

  /**
   * website defines an optional website link.
   *
   * @generated from field: string website = 3;
   */
  website: string;

  /**
   * security_contact defines an optional email for security contact.
   *
   * @generated from field: string security_contact = 4;
   */
  securityContact: string;

  /**
   * details define other optional details.
   *
   * @generated from field: string details = 5;
   */
  details: string;
};

/**
 * Describes the message cosmos.staking.v1beta1.Description.
 * Use `create(DescriptionSchema)` to create a new message.
 */
export const DescriptionSchema: GenMessage<Description> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_staking, 3);

/**
 * Validator defines a validator, together with the total amount of the
 * Validator's bond shares and their exchange rate to coins. Slashing results in
 * a decrease in the exchange rate, allowing correct calculation of future
 * undelegations without iterating over delegators. When coins are delegated to
 * this validator, the validator is credited with a delegation whose number of
 * bond shares is based on the amount of coins delegated divided by the current
 * exchange rate. Voting power can be calculated as total bonded shares
 * multiplied by exchange rate.
 *
 * @generated from message cosmos.staking.v1beta1.Validator
 */
export type Validator = Message<"cosmos.staking.v1beta1.Validator"> & {
  /**
   * operator_address defines the address of the validator's operator; bech encoded in JSON.
   *
   * @generated from field: string operator_address = 1;
   */
  operatorAddress: string;

  /**
   * consensus_pubkey is the consensus public key of the validator, as a Protobuf Any.
   *
   * @generated from field: google.protobuf.Any consensus_pubkey = 2;
   */
  consensusPubkey?: Any;

  /**
   * jailed defined whether the validator has been jailed from bonded status or not.
   *
   * @generated from field: bool jailed = 3;
   */
  jailed: boolean;

  /**
   * status is the validator status (bonded/unbonding/unbonded).
   *
   * @generated from field: cosmos.staking.v1beta1.BondStatus status = 4;
   */
  status: BondStatus;

  /**
   * tokens define the delegated tokens (incl. self-delegation).
   *
   * @generated from field: string tokens = 5;
   */
  tokens: string;

  /**
   * delegator_shares defines total shares issued to a validator's delegators.
   *
   * @generated from field: string delegator_shares = 6;
   */
  delegatorShares: string;

  /**
   * description defines the description terms for the validator.
   *
   * @generated from field: cosmos.staking.v1beta1.Description description = 7;
   */
  description?: Description;

  /**
   * unbonding_height defines, if unbonding, the height at which this validator has begun unbonding.
   *
   * @generated from field: int64 unbonding_height = 8;
   */
  unbondingHeight: bigint;

  /**
   * unbonding_time defines, if unbonding, the min time for the validator to complete unbonding.
   *
   * @generated from field: google.protobuf.Timestamp unbonding_time = 9;
   */
  unbondingTime?: Timestamp;

  /**
   * commission defines the commission parameters.
   *
   * @generated from field: cosmos.staking.v1beta1.Commission commission = 10;
   */
  commission?: Commission;

  /**
   * min_self_delegation is the validator's self declared minimum self delegation.
   *
   * Since: cosmos-sdk 0.46
   *
   * @generated from field: string min_self_delegation = 11;
   */
  minSelfDelegation: string;

  /**
   * strictly positive if this validator's unbonding has been stopped by external modules
   *
   * @generated from field: int64 unbonding_on_hold_ref_count = 12;
   */
  unbondingOnHoldRefCount: bigint;

  /**
   * list of unbonding ids, each uniquely identifing an unbonding of this validator
   *
   * @generated from field: repeated uint64 unbonding_ids = 13;
   */
  unbondingIds: bigint[];
};

/**
 * Describes the message cosmos.staking.v1beta1.Validator.
 * Use `create(ValidatorSchema)` to create a new message.
 */
export const ValidatorSchema: GenMessage<Validator> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_staking, 4);

/**
 * ValAddresses defines a repeated set of validator addresses.
 *
 * @generated from message cosmos.staking.v1beta1.ValAddresses
 */
export type ValAddresses = Message<"cosmos.staking.v1beta1.ValAddresses"> & {
  /**
   * @generated from field: repeated string addresses = 1;
   */
  addresses: string[];
};

/**
 * Describes the message cosmos.staking.v1beta1.ValAddresses.
 * Use `create(ValAddressesSchema)` to create a new message.
 */
export const ValAddressesSchema: GenMessage<ValAddresses> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_staking, 5);

/**
 * DVPair is struct that just has a delegator-validator pair with no other data.
 * It is intended to be used as a marshalable pointer. For example, a DVPair can
 * be used to construct the key to getting an UnbondingDelegation from state.
 *
 * @generated from message cosmos.staking.v1beta1.DVPair
 */
export type DVPair = Message<"cosmos.staking.v1beta1.DVPair"> & {
  /**
   * @generated from field: string delegator_address = 1;
   */
  delegatorAddress: string;

  /**
   * @generated from field: string validator_address = 2;
   */
  validatorAddress: string;
};

/**
 * Describes the message cosmos.staking.v1beta1.DVPair.
 * Use `create(DVPairSchema)` to create a new message.
 */
export const DVPairSchema: GenMessage<DVPair> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_staking, 6);

/**
 * DVPairs defines an array of DVPair objects.
 *
 * @generated from message cosmos.staking.v1beta1.DVPairs
 */
export type DVPairs = Message<"cosmos.staking.v1beta1.DVPairs"> & {
  /**
   * @generated from field: repeated cosmos.staking.v1beta1.DVPair pairs = 1;
   */
  pairs: DVPair[];
};

/**
 * Describes the message cosmos.staking.v1beta1.DVPairs.
 * Use `create(DVPairsSchema)` to create a new message.
 */
export const DVPairsSchema: GenMessage<DVPairs> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_staking, 7);

/**
 * DVVTriplet is struct that just has a delegator-validator-validator triplet
 * with no other data. It is intended to be used as a marshalable pointer. For
 * example, a DVVTriplet can be used to construct the key to getting a
 * Redelegation from state.
 *
 * @generated from message cosmos.staking.v1beta1.DVVTriplet
 */
export type DVVTriplet = Message<"cosmos.staking.v1beta1.DVVTriplet"> & {
  /**
   * @generated from field: string delegator_address = 1;
   */
  delegatorAddress: string;

  /**
   * @generated from field: string validator_src_address = 2;
   */
  validatorSrcAddress: string;

  /**
   * @generated from field: string validator_dst_address = 3;
   */
  validatorDstAddress: string;
};

/**
 * Describes the message cosmos.staking.v1beta1.DVVTriplet.
 * Use `create(DVVTripletSchema)` to create a new message.
 */
export const DVVTripletSchema: GenMessage<DVVTriplet> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_staking, 8);

/**
 * DVVTriplets defines an array of DVVTriplet objects.
 *
 * @generated from message cosmos.staking.v1beta1.DVVTriplets
 */
export type DVVTriplets = Message<"cosmos.staking.v1beta1.DVVTriplets"> & {
  /**
   * @generated from field: repeated cosmos.staking.v1beta1.DVVTriplet triplets = 1;
   */
  triplets: DVVTriplet[];
};

/**
 * Describes the message cosmos.staking.v1beta1.DVVTriplets.
 * Use `create(DVVTripletsSchema)` to create a new message.
 */
export const DVVTripletsSchema: GenMessage<DVVTriplets> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_staking, 9);

/**
 * Delegation represents the bond with tokens held by an account. It is
 * owned by one delegator, and is associated with the voting power of one
 * validator.
 *
 * @generated from message cosmos.staking.v1beta1.Delegation
 */
export type Delegation = Message<"cosmos.staking.v1beta1.Delegation"> & {
  /**
   * delegator_address is the encoded address of the delegator.
   *
   * @generated from field: string delegator_address = 1;
   */
  delegatorAddress: string;

  /**
   * validator_address is the encoded address of the validator.
   *
   * @generated from field: string validator_address = 2;
   */
  validatorAddress: string;

  /**
   * shares define the delegation shares received.
   *
   * @generated from field: string shares = 3;
   */
  shares: string;
};

/**
 * Describes the message cosmos.staking.v1beta1.Delegation.
 * Use `create(DelegationSchema)` to create a new message.
 */
export const DelegationSchema: GenMessage<Delegation> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_staking, 10);

/**
 * UnbondingDelegation stores all of a single delegator's unbonding bonds
 * for a single validator in an time-ordered list.
 *
 * @generated from message cosmos.staking.v1beta1.UnbondingDelegation
 */
export type UnbondingDelegation = Message<"cosmos.staking.v1beta1.UnbondingDelegation"> & {
  /**
   * delegator_address is the encoded address of the delegator.
   *
   * @generated from field: string delegator_address = 1;
   */
  delegatorAddress: string;

  /**
   * validator_address is the encoded address of the validator.
   *
   * @generated from field: string validator_address = 2;
   */
  validatorAddress: string;

  /**
   * entries are the unbonding delegation entries.
   *
   * unbonding delegation entries
   *
   * @generated from field: repeated cosmos.staking.v1beta1.UnbondingDelegationEntry entries = 3;
   */
  entries: UnbondingDelegationEntry[];
};

/**
 * Describes the message cosmos.staking.v1beta1.UnbondingDelegation.
 * Use `create(UnbondingDelegationSchema)` to create a new message.
 */
export const UnbondingDelegationSchema: GenMessage<UnbondingDelegation> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_staking, 11);

/**
 * UnbondingDelegationEntry defines an unbonding object with relevant metadata.
 *
 * @generated from message cosmos.staking.v1beta1.UnbondingDelegationEntry
 */
export type UnbondingDelegationEntry = Message<"cosmos.staking.v1beta1.UnbondingDelegationEntry"> & {
  /**
   * creation_height is the height which the unbonding took place.
   *
   * @generated from field: int64 creation_height = 1;
   */
  creationHeight: bigint;

  /**
   * completion_time is the unix time for unbonding completion.
   *
   * @generated from field: google.protobuf.Timestamp completion_time = 2;
   */
  completionTime?: Timestamp;

  /**
   * initial_balance defines the tokens initially scheduled to receive at completion.
   *
   * @generated from field: string initial_balance = 3;
   */
  initialBalance: string;

  /**
   * balance defines the tokens to receive at completion.
   *
   * @generated from field: string balance = 4;
   */
  balance: string;

  /**
   * Incrementing id that uniquely identifies this entry
   *
   * @generated from field: uint64 unbonding_id = 5;
   */
  unbondingId: bigint;

  /**
   * Strictly positive if this entry's unbonding has been stopped by external modules
   *
   * @generated from field: int64 unbonding_on_hold_ref_count = 6;
   */
  unbondingOnHoldRefCount: bigint;
};

/**
 * Describes the message cosmos.staking.v1beta1.UnbondingDelegationEntry.
 * Use `create(UnbondingDelegationEntrySchema)` to create a new message.
 */
export const UnbondingDelegationEntrySchema: GenMessage<UnbondingDelegationEntry> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_staking, 12);

/**
 * RedelegationEntry defines a redelegation object with relevant metadata.
 *
 * @generated from message cosmos.staking.v1beta1.RedelegationEntry
 */
export type RedelegationEntry = Message<"cosmos.staking.v1beta1.RedelegationEntry"> & {
  /**
   * creation_height  defines the height which the redelegation took place.
   *
   * @generated from field: int64 creation_height = 1;
   */
  creationHeight: bigint;

  /**
   * completion_time defines the unix time for redelegation completion.
   *
   * @generated from field: google.protobuf.Timestamp completion_time = 2;
   */
  completionTime?: Timestamp;

  /**
   * initial_balance defines the initial balance when redelegation started.
   *
   * @generated from field: string initial_balance = 3;
   */
  initialBalance: string;

  /**
   * shares_dst is the amount of destination-validator shares created by redelegation.
   *
   * @generated from field: string shares_dst = 4;
   */
  sharesDst: string;

  /**
   * Incrementing id that uniquely identifies this entry
   *
   * @generated from field: uint64 unbonding_id = 5;
   */
  unbondingId: bigint;

  /**
   * Strictly positive if this entry's unbonding has been stopped by external modules
   *
   * @generated from field: int64 unbonding_on_hold_ref_count = 6;
   */
  unbondingOnHoldRefCount: bigint;
};

/**
 * Describes the message cosmos.staking.v1beta1.RedelegationEntry.
 * Use `create(RedelegationEntrySchema)` to create a new message.
 */
export const RedelegationEntrySchema: GenMessage<RedelegationEntry> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_staking, 13);

/**
 * Redelegation contains the list of a particular delegator's redelegating bonds
 * from a particular source validator to a particular destination validator.
 *
 * @generated from message cosmos.staking.v1beta1.Redelegation
 */
export type Redelegation = Message<"cosmos.staking.v1beta1.Redelegation"> & {
  /**
   * delegator_address is the bech32-encoded address of the delegator.
   *
   * @generated from field: string delegator_address = 1;
   */
  delegatorAddress: string;

  /**
   * validator_src_address is the validator redelegation source operator address.
   *
   * @generated from field: string validator_src_address = 2;
   */
  validatorSrcAddress: string;

  /**
   * validator_dst_address is the validator redelegation destination operator address.
   *
   * @generated from field: string validator_dst_address = 3;
   */
  validatorDstAddress: string;

  /**
   * entries are the redelegation entries.
   *
   * redelegation entries
   *
   * @generated from field: repeated cosmos.staking.v1beta1.RedelegationEntry entries = 4;
   */
  entries: RedelegationEntry[];
};

/**
 * Describes the message cosmos.staking.v1beta1.Redelegation.
 * Use `create(RedelegationSchema)` to create a new message.
 */
export const RedelegationSchema: GenMessage<Redelegation> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_staking, 14);

/**
 * Params defines the parameters for the x/staking module.
 *
 * @generated from message cosmos.staking.v1beta1.Params
 */
export type Params = Message<"cosmos.staking.v1beta1.Params"> & {
  /**
   * unbonding_time is the time duration of unbonding.
   *
   * @generated from field: google.protobuf.Duration unbonding_time = 1;
   */
  unbondingTime?: Duration;

  /**
   * max_validators is the maximum number of validators.
   *
   * @generated from field: uint32 max_validators = 2;
   */
  maxValidators: number;

  /**
   * max_entries is the max entries for either unbonding delegation or redelegation (per pair/trio).
   *
   * @generated from field: uint32 max_entries = 3;
   */
  maxEntries: number;

  /**
   * historical_entries is the number of historical entries to persist.
   *
   * @generated from field: uint32 historical_entries = 4;
   */
  historicalEntries: number;

  /**
   * bond_denom defines the bondable coin denomination.
   *
   * @generated from field: string bond_denom = 5;
   */
  bondDenom: string;

  /**
   * min_commission_rate is the chain-wide minimum commission rate that a validator can charge their delegators
   *
   * @generated from field: string min_commission_rate = 6;
   */
  minCommissionRate: string;
};

/**
 * Describes the message cosmos.staking.v1beta1.Params.
 * Use `create(ParamsSchema)` to create a new message.
 */
export const ParamsSchema: GenMessage<Params> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_staking, 15);

/**
 * DelegationResponse is equivalent to Delegation except that it contains a
 * balance in addition to shares which is more suitable for client responses.
 *
 * @generated from message cosmos.staking.v1beta1.DelegationResponse
 */
export type DelegationResponse = Message<"cosmos.staking.v1beta1.DelegationResponse"> & {
  /**
   * @generated from field: cosmos.staking.v1beta1.Delegation delegation = 1;
   */
  delegation?: Delegation;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin balance = 2;
   */
  balance?: Coin;
};

/**
 * Describes the message cosmos.staking.v1beta1.DelegationResponse.
 * Use `create(DelegationResponseSchema)` to create a new message.
 */
export const DelegationResponseSchema: GenMessage<DelegationResponse> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_staking, 16);

/**
 * RedelegationEntryResponse is equivalent to a RedelegationEntry except that it
 * contains a balance in addition to shares which is more suitable for client
 * responses.
 *
 * @generated from message cosmos.staking.v1beta1.RedelegationEntryResponse
 */
export type RedelegationEntryResponse = Message<"cosmos.staking.v1beta1.RedelegationEntryResponse"> & {
  /**
   * @generated from field: cosmos.staking.v1beta1.RedelegationEntry redelegation_entry = 1;
   */
  redelegationEntry?: RedelegationEntry;

  /**
   * @generated from field: string balance = 4;
   */
  balance: string;
};

/**
 * Describes the message cosmos.staking.v1beta1.RedelegationEntryResponse.
 * Use `create(RedelegationEntryResponseSchema)` to create a new message.
 */
export const RedelegationEntryResponseSchema: GenMessage<RedelegationEntryResponse> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_staking, 17);

/**
 * RedelegationResponse is equivalent to a Redelegation except that its entries
 * contain a balance in addition to shares which is more suitable for client
 * responses.
 *
 * @generated from message cosmos.staking.v1beta1.RedelegationResponse
 */
export type RedelegationResponse = Message<"cosmos.staking.v1beta1.RedelegationResponse"> & {
  /**
   * @generated from field: cosmos.staking.v1beta1.Redelegation redelegation = 1;
   */
  redelegation?: Redelegation;

  /**
   * @generated from field: repeated cosmos.staking.v1beta1.RedelegationEntryResponse entries = 2;
   */
  entries: RedelegationEntryResponse[];
};

/**
 * Describes the message cosmos.staking.v1beta1.RedelegationResponse.
 * Use `create(RedelegationResponseSchema)` to create a new message.
 */
export const RedelegationResponseSchema: GenMessage<RedelegationResponse> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_staking, 18);

/**
 * Pool is used for tracking bonded and not-bonded token supply of the bond
 * denomination.
 *
 * @generated from message cosmos.staking.v1beta1.Pool
 */
export type Pool = Message<"cosmos.staking.v1beta1.Pool"> & {
  /**
   * @generated from field: string not_bonded_tokens = 1;
   */
  notBondedTokens: string;

  /**
   * @generated from field: string bonded_tokens = 2;
   */
  bondedTokens: string;
};

/**
 * Describes the message cosmos.staking.v1beta1.Pool.
 * Use `create(PoolSchema)` to create a new message.
 */
export const PoolSchema: GenMessage<Pool> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_staking, 19);

/**
 * ValidatorUpdates defines an array of abci.ValidatorUpdate objects.
 * TODO: explore moving this to proto/cosmos/base to separate modules from tendermint dependence
 *
 * @generated from message cosmos.staking.v1beta1.ValidatorUpdates
 */
export type ValidatorUpdates = Message<"cosmos.staking.v1beta1.ValidatorUpdates"> & {
  /**
   * @generated from field: repeated tendermint.abci.ValidatorUpdate updates = 1;
   */
  updates: ValidatorUpdate[];
};

/**
 * Describes the message cosmos.staking.v1beta1.ValidatorUpdates.
 * Use `create(ValidatorUpdatesSchema)` to create a new message.
 */
export const ValidatorUpdatesSchema: GenMessage<ValidatorUpdates> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_staking, 20);

/**
 * BondStatus is the status of a validator.
 *
 * @generated from enum cosmos.staking.v1beta1.BondStatus
 */
export enum BondStatus {
  /**
   * UNSPECIFIED defines an invalid validator status.
   *
   * @generated from enum value: BOND_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * UNBONDED defines a validator that is not bonded.
   *
   * @generated from enum value: BOND_STATUS_UNBONDED = 1;
   */
  UNBONDED = 1,

  /**
   * UNBONDING defines a validator that is unbonding.
   *
   * @generated from enum value: BOND_STATUS_UNBONDING = 2;
   */
  UNBONDING = 2,

  /**
   * BONDED defines a validator that is bonded.
   *
   * @generated from enum value: BOND_STATUS_BONDED = 3;
   */
  BONDED = 3,
}

/**
 * Describes the enum cosmos.staking.v1beta1.BondStatus.
 */
export const BondStatusSchema: GenEnum<BondStatus> = /*@__PURE__*/
  enumDesc(file_cosmos_staking_v1beta1_staking, 0);

/**
 * Infraction indicates the infraction a validator commited.
 *
 * @generated from enum cosmos.staking.v1beta1.Infraction
 */
export enum Infraction {
  /**
   * UNSPECIFIED defines an empty infraction.
   *
   * @generated from enum value: INFRACTION_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * DOUBLE_SIGN defines a validator that double-signs a block.
   *
   * @generated from enum value: INFRACTION_DOUBLE_SIGN = 1;
   */
  DOUBLE_SIGN = 1,

  /**
   * DOWNTIME defines a validator that missed signing too many blocks.
   *
   * @generated from enum value: INFRACTION_DOWNTIME = 2;
   */
  DOWNTIME = 2,
}

/**
 * Describes the enum cosmos.staking.v1beta1.Infraction.
 */
export const InfractionSchema: GenEnum<Infraction> = /*@__PURE__*/
  enumDesc(file_cosmos_staking_v1beta1_staking, 1);

