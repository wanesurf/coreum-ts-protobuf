// @generated by protoc-gen-es v2.0.0 with parameter "target=ts"
// @generated from file tendermint/abci/types.proto (package tendermint.abci, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import type { ProofOps } from "../crypto/proof_pb";
import { file_tendermint_crypto_proof } from "../crypto/proof_pb";
import type { PublicKey } from "../crypto/keys_pb";
import { file_tendermint_crypto_keys } from "../crypto/keys_pb";
import type { ConsensusParams } from "../types/params_pb";
import { file_tendermint_types_params } from "../types/params_pb";
import type { BlockIDFlag } from "../types/validator_pb";
import { file_tendermint_types_validator } from "../types/validator_pb";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import { file_gogoproto_gogo } from "../../gogoproto/gogo_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file tendermint/abci/types.proto.
 */
export const file_tendermint_abci_types: GenFile = /*@__PURE__*/
  fileDesc("", [file_tendermint_crypto_proof, file_tendermint_crypto_keys, file_tendermint_types_params, file_tendermint_types_validator, file_google_protobuf_timestamp, file_gogoproto_gogo]);

/**
 * @generated from message tendermint.abci.Request
 */
export type Request = Message<"tendermint.abci.Request"> & {
  /**
   * @generated from oneof tendermint.abci.Request.value
   */
  value: {
    /**
     * @generated from field: tendermint.abci.RequestEcho echo = 1;
     */
    value: RequestEcho;
    case: "echo";
  } | {
    /**
     * @generated from field: tendermint.abci.RequestFlush flush = 2;
     */
    value: RequestFlush;
    case: "flush";
  } | {
    /**
     * @generated from field: tendermint.abci.RequestInfo info = 3;
     */
    value: RequestInfo;
    case: "info";
  } | {
    /**
     * @generated from field: tendermint.abci.RequestInitChain init_chain = 5;
     */
    value: RequestInitChain;
    case: "initChain";
  } | {
    /**
     * @generated from field: tendermint.abci.RequestQuery query = 6;
     */
    value: RequestQuery;
    case: "query";
  } | {
    /**
     * @generated from field: tendermint.abci.RequestCheckTx check_tx = 8;
     */
    value: RequestCheckTx;
    case: "checkTx";
  } | {
    /**
     * @generated from field: tendermint.abci.RequestCommit commit = 11;
     */
    value: RequestCommit;
    case: "commit";
  } | {
    /**
     * @generated from field: tendermint.abci.RequestListSnapshots list_snapshots = 12;
     */
    value: RequestListSnapshots;
    case: "listSnapshots";
  } | {
    /**
     * @generated from field: tendermint.abci.RequestOfferSnapshot offer_snapshot = 13;
     */
    value: RequestOfferSnapshot;
    case: "offerSnapshot";
  } | {
    /**
     * @generated from field: tendermint.abci.RequestLoadSnapshotChunk load_snapshot_chunk = 14;
     */
    value: RequestLoadSnapshotChunk;
    case: "loadSnapshotChunk";
  } | {
    /**
     * @generated from field: tendermint.abci.RequestApplySnapshotChunk apply_snapshot_chunk = 15;
     */
    value: RequestApplySnapshotChunk;
    case: "applySnapshotChunk";
  } | {
    /**
     * @generated from field: tendermint.abci.RequestPrepareProposal prepare_proposal = 16;
     */
    value: RequestPrepareProposal;
    case: "prepareProposal";
  } | {
    /**
     * @generated from field: tendermint.abci.RequestProcessProposal process_proposal = 17;
     */
    value: RequestProcessProposal;
    case: "processProposal";
  } | {
    /**
     * @generated from field: tendermint.abci.RequestExtendVote extend_vote = 18;
     */
    value: RequestExtendVote;
    case: "extendVote";
  } | {
    /**
     * @generated from field: tendermint.abci.RequestVerifyVoteExtension verify_vote_extension = 19;
     */
    value: RequestVerifyVoteExtension;
    case: "verifyVoteExtension";
  } | {
    /**
     * @generated from field: tendermint.abci.RequestFinalizeBlock finalize_block = 20;
     */
    value: RequestFinalizeBlock;
    case: "finalizeBlock";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message tendermint.abci.Request.
 * Use `create(RequestSchema)` to create a new message.
 */
export const RequestSchema: GenMessage<Request> = /*@__PURE__*/
  messageDesc(file_tendermint_abci_types, 0);

/**
 * @generated from message tendermint.abci.RequestEcho
 */
export type RequestEcho = Message<"tendermint.abci.RequestEcho"> & {
  /**
   * @generated from field: string message = 1;
   */
  message: string;
};

/**
 * Describes the message tendermint.abci.RequestEcho.
 * Use `create(RequestEchoSchema)` to create a new message.
 */
export const RequestEchoSchema: GenMessage<RequestEcho> = /*@__PURE__*/
  messageDesc(file_tendermint_abci_types, 1);

/**
 * @generated from message tendermint.abci.RequestFlush
 */
export type RequestFlush = Message<"tendermint.abci.RequestFlush"> & {
};

/**
 * Describes the message tendermint.abci.RequestFlush.
 * Use `create(RequestFlushSchema)` to create a new message.
 */
export const RequestFlushSchema: GenMessage<RequestFlush> = /*@__PURE__*/
  messageDesc(file_tendermint_abci_types, 2);

/**
 * @generated from message tendermint.abci.RequestInfo
 */
export type RequestInfo = Message<"tendermint.abci.RequestInfo"> & {
  /**
   * @generated from field: string version = 1;
   */
  version: string;

  /**
   * @generated from field: uint64 block_version = 2;
   */
  blockVersion: bigint;

  /**
   * @generated from field: uint64 p2p_version = 3;
   */
  p2pVersion: bigint;

  /**
   * @generated from field: string abci_version = 4;
   */
  abciVersion: string;
};

/**
 * Describes the message tendermint.abci.RequestInfo.
 * Use `create(RequestInfoSchema)` to create a new message.
 */
export const RequestInfoSchema: GenMessage<RequestInfo> = /*@__PURE__*/
  messageDesc(file_tendermint_abci_types, 3);

/**
 * @generated from message tendermint.abci.RequestInitChain
 */
export type RequestInitChain = Message<"tendermint.abci.RequestInitChain"> & {
  /**
   * @generated from field: google.protobuf.Timestamp time = 1;
   */
  time?: Timestamp;

  /**
   * @generated from field: string chain_id = 2;
   */
  chainId: string;

  /**
   * @generated from field: tendermint.types.ConsensusParams consensus_params = 3;
   */
  consensusParams?: ConsensusParams;

  /**
   * @generated from field: repeated tendermint.abci.ValidatorUpdate validators = 4;
   */
  validators: ValidatorUpdate[];

  /**
   * @generated from field: bytes app_state_bytes = 5;
   */
  appStateBytes: Uint8Array;

  /**
   * @generated from field: int64 initial_height = 6;
   */
  initialHeight: bigint;
};

/**
 * Describes the message tendermint.abci.RequestInitChain.
 * Use `create(RequestInitChainSchema)` to create a new message.
 */
export const RequestInitChainSchema: GenMessage<RequestInitChain> = /*@__PURE__*/
  messageDesc(file_tendermint_abci_types, 4);

/**
 * @generated from message tendermint.abci.RequestQuery
 */
export type RequestQuery = Message<"tendermint.abci.RequestQuery"> & {
  /**
   * @generated from field: bytes data = 1;
   */
  data: Uint8Array;

  /**
   * @generated from field: string path = 2;
   */
  path: string;

  /**
   * @generated from field: int64 height = 3;
   */
  height: bigint;

  /**
   * @generated from field: bool prove = 4;
   */
  prove: boolean;
};

/**
 * Describes the message tendermint.abci.RequestQuery.
 * Use `create(RequestQuerySchema)` to create a new message.
 */
export const RequestQuerySchema: GenMessage<RequestQuery> = /*@__PURE__*/
  messageDesc(file_tendermint_abci_types, 5);

/**
 * @generated from message tendermint.abci.RequestCheckTx
 */
export type RequestCheckTx = Message<"tendermint.abci.RequestCheckTx"> & {
  /**
   * @generated from field: bytes tx = 1;
   */
  tx: Uint8Array;

  /**
   * @generated from field: tendermint.abci.CheckTxType type = 2;
   */
  type: CheckTxType;
};

/**
 * Describes the message tendermint.abci.RequestCheckTx.
 * Use `create(RequestCheckTxSchema)` to create a new message.
 */
export const RequestCheckTxSchema: GenMessage<RequestCheckTx> = /*@__PURE__*/
  messageDesc(file_tendermint_abci_types, 6);

/**
 * @generated from message tendermint.abci.RequestCommit
 */
export type RequestCommit = Message<"tendermint.abci.RequestCommit"> & {
};

/**
 * Describes the message tendermint.abci.RequestCommit.
 * Use `create(RequestCommitSchema)` to create a new message.
 */
export const RequestCommitSchema: GenMessage<RequestCommit> = /*@__PURE__*/
  messageDesc(file_tendermint_abci_types, 7);

/**
 * lists available snapshots
 *
 * @generated from message tendermint.abci.RequestListSnapshots
 */
export type RequestListSnapshots = Message<"tendermint.abci.RequestListSnapshots"> & {
};

/**
 * Describes the message tendermint.abci.RequestListSnapshots.
 * Use `create(RequestListSnapshotsSchema)` to create a new message.
 */
export const RequestListSnapshotsSchema: GenMessage<RequestListSnapshots> = /*@__PURE__*/
  messageDesc(file_tendermint_abci_types, 8);

/**
 * offers a snapshot to the application
 *
 * @generated from message tendermint.abci.RequestOfferSnapshot
 */
export type RequestOfferSnapshot = Message<"tendermint.abci.RequestOfferSnapshot"> & {
  /**
   * snapshot offered by peers
   *
   * @generated from field: tendermint.abci.Snapshot snapshot = 1;
   */
  snapshot?: Snapshot;

  /**
   * light client-verified app hash for snapshot height
   *
   * @generated from field: bytes app_hash = 2;
   */
  appHash: Uint8Array;
};

/**
 * Describes the message tendermint.abci.RequestOfferSnapshot.
 * Use `create(RequestOfferSnapshotSchema)` to create a new message.
 */
export const RequestOfferSnapshotSchema: GenMessage<RequestOfferSnapshot> = /*@__PURE__*/
  messageDesc(file_tendermint_abci_types, 9);

/**
 * loads a snapshot chunk
 *
 * @generated from message tendermint.abci.RequestLoadSnapshotChunk
 */
export type RequestLoadSnapshotChunk = Message<"tendermint.abci.RequestLoadSnapshotChunk"> & {
  /**
   * @generated from field: uint64 height = 1;
   */
  height: bigint;

  /**
   * @generated from field: uint32 format = 2;
   */
  format: number;

  /**
   * @generated from field: uint32 chunk = 3;
   */
  chunk: number;
};

/**
 * Describes the message tendermint.abci.RequestLoadSnapshotChunk.
 * Use `create(RequestLoadSnapshotChunkSchema)` to create a new message.
 */
export const RequestLoadSnapshotChunkSchema: GenMessage<RequestLoadSnapshotChunk> = /*@__PURE__*/
  messageDesc(file_tendermint_abci_types, 10);

/**
 * Applies a snapshot chunk
 *
 * @generated from message tendermint.abci.RequestApplySnapshotChunk
 */
export type RequestApplySnapshotChunk = Message<"tendermint.abci.RequestApplySnapshotChunk"> & {
  /**
   * @generated from field: uint32 index = 1;
   */
  index: number;

  /**
   * @generated from field: bytes chunk = 2;
   */
  chunk: Uint8Array;

  /**
   * @generated from field: string sender = 3;
   */
  sender: string;
};

/**
 * Describes the message tendermint.abci.RequestApplySnapshotChunk.
 * Use `create(RequestApplySnapshotChunkSchema)` to create a new message.
 */
export const RequestApplySnapshotChunkSchema: GenMessage<RequestApplySnapshotChunk> = /*@__PURE__*/
  messageDesc(file_tendermint_abci_types, 11);

/**
 * @generated from message tendermint.abci.RequestPrepareProposal
 */
export type RequestPrepareProposal = Message<"tendermint.abci.RequestPrepareProposal"> & {
  /**
   * the modified transactions cannot exceed this size.
   *
   * @generated from field: int64 max_tx_bytes = 1;
   */
  maxTxBytes: bigint;

  /**
   * txs is an array of transactions that will be included in a block,
   * sent to the app for possible modifications.
   *
   * @generated from field: repeated bytes txs = 2;
   */
  txs: Uint8Array[];

  /**
   * @generated from field: tendermint.abci.ExtendedCommitInfo local_last_commit = 3;
   */
  localLastCommit?: ExtendedCommitInfo;

  /**
   * @generated from field: repeated tendermint.abci.Misbehavior misbehavior = 4;
   */
  misbehavior: Misbehavior[];

  /**
   * @generated from field: int64 height = 5;
   */
  height: bigint;

  /**
   * @generated from field: google.protobuf.Timestamp time = 6;
   */
  time?: Timestamp;

  /**
   * @generated from field: bytes next_validators_hash = 7;
   */
  nextValidatorsHash: Uint8Array;

  /**
   * address of the public key of the validator proposing the block.
   *
   * @generated from field: bytes proposer_address = 8;
   */
  proposerAddress: Uint8Array;
};

/**
 * Describes the message tendermint.abci.RequestPrepareProposal.
 * Use `create(RequestPrepareProposalSchema)` to create a new message.
 */
export const RequestPrepareProposalSchema: GenMessage<RequestPrepareProposal> = /*@__PURE__*/
  messageDesc(file_tendermint_abci_types, 12);

/**
 * @generated from message tendermint.abci.RequestProcessProposal
 */
export type RequestProcessProposal = Message<"tendermint.abci.RequestProcessProposal"> & {
  /**
   * @generated from field: repeated bytes txs = 1;
   */
  txs: Uint8Array[];

  /**
   * @generated from field: tendermint.abci.CommitInfo proposed_last_commit = 2;
   */
  proposedLastCommit?: CommitInfo;

  /**
   * @generated from field: repeated tendermint.abci.Misbehavior misbehavior = 3;
   */
  misbehavior: Misbehavior[];

  /**
   * hash is the merkle root hash of the fields of the proposed block.
   *
   * @generated from field: bytes hash = 4;
   */
  hash: Uint8Array;

  /**
   * @generated from field: int64 height = 5;
   */
  height: bigint;

  /**
   * @generated from field: google.protobuf.Timestamp time = 6;
   */
  time?: Timestamp;

  /**
   * @generated from field: bytes next_validators_hash = 7;
   */
  nextValidatorsHash: Uint8Array;

  /**
   * address of the public key of the original proposer of the block.
   *
   * @generated from field: bytes proposer_address = 8;
   */
  proposerAddress: Uint8Array;
};

/**
 * Describes the message tendermint.abci.RequestProcessProposal.
 * Use `create(RequestProcessProposalSchema)` to create a new message.
 */
export const RequestProcessProposalSchema: GenMessage<RequestProcessProposal> = /*@__PURE__*/
  messageDesc(file_tendermint_abci_types, 13);

/**
 * Extends a vote with application-injected data
 *
 * @generated from message tendermint.abci.RequestExtendVote
 */
export type RequestExtendVote = Message<"tendermint.abci.RequestExtendVote"> & {
  /**
   * the hash of the block that this vote may be referring to
   *
   * @generated from field: bytes hash = 1;
   */
  hash: Uint8Array;

  /**
   * the height of the extended vote
   *
   * @generated from field: int64 height = 2;
   */
  height: bigint;

  /**
   * info of the block that this vote may be referring to
   *
   * @generated from field: google.protobuf.Timestamp time = 3;
   */
  time?: Timestamp;

  /**
   * @generated from field: repeated bytes txs = 4;
   */
  txs: Uint8Array[];

  /**
   * @generated from field: tendermint.abci.CommitInfo proposed_last_commit = 5;
   */
  proposedLastCommit?: CommitInfo;

  /**
   * @generated from field: repeated tendermint.abci.Misbehavior misbehavior = 6;
   */
  misbehavior: Misbehavior[];

  /**
   * @generated from field: bytes next_validators_hash = 7;
   */
  nextValidatorsHash: Uint8Array;

  /**
   * address of the public key of the original proposer of the block.
   *
   * @generated from field: bytes proposer_address = 8;
   */
  proposerAddress: Uint8Array;
};

/**
 * Describes the message tendermint.abci.RequestExtendVote.
 * Use `create(RequestExtendVoteSchema)` to create a new message.
 */
export const RequestExtendVoteSchema: GenMessage<RequestExtendVote> = /*@__PURE__*/
  messageDesc(file_tendermint_abci_types, 14);

/**
 * Verify the vote extension
 *
 * @generated from message tendermint.abci.RequestVerifyVoteExtension
 */
export type RequestVerifyVoteExtension = Message<"tendermint.abci.RequestVerifyVoteExtension"> & {
  /**
   * the hash of the block that this received vote corresponds to
   *
   * @generated from field: bytes hash = 1;
   */
  hash: Uint8Array;

  /**
   * the validator that signed the vote extension
   *
   * @generated from field: bytes validator_address = 2;
   */
  validatorAddress: Uint8Array;

  /**
   * @generated from field: int64 height = 3;
   */
  height: bigint;

  /**
   * @generated from field: bytes vote_extension = 4;
   */
  voteExtension: Uint8Array;
};

/**
 * Describes the message tendermint.abci.RequestVerifyVoteExtension.
 * Use `create(RequestVerifyVoteExtensionSchema)` to create a new message.
 */
export const RequestVerifyVoteExtensionSchema: GenMessage<RequestVerifyVoteExtension> = /*@__PURE__*/
  messageDesc(file_tendermint_abci_types, 15);

/**
 * @generated from message tendermint.abci.RequestFinalizeBlock
 */
export type RequestFinalizeBlock = Message<"tendermint.abci.RequestFinalizeBlock"> & {
  /**
   * @generated from field: repeated bytes txs = 1;
   */
  txs: Uint8Array[];

  /**
   * @generated from field: tendermint.abci.CommitInfo decided_last_commit = 2;
   */
  decidedLastCommit?: CommitInfo;

  /**
   * @generated from field: repeated tendermint.abci.Misbehavior misbehavior = 3;
   */
  misbehavior: Misbehavior[];

  /**
   * hash is the merkle root hash of the fields of the decided block.
   *
   * @generated from field: bytes hash = 4;
   */
  hash: Uint8Array;

  /**
   * @generated from field: int64 height = 5;
   */
  height: bigint;

  /**
   * @generated from field: google.protobuf.Timestamp time = 6;
   */
  time?: Timestamp;

  /**
   * @generated from field: bytes next_validators_hash = 7;
   */
  nextValidatorsHash: Uint8Array;

  /**
   * proposer_address is the address of the public key of the original proposer of the block.
   *
   * @generated from field: bytes proposer_address = 8;
   */
  proposerAddress: Uint8Array;
};

/**
 * Describes the message tendermint.abci.RequestFinalizeBlock.
 * Use `create(RequestFinalizeBlockSchema)` to create a new message.
 */
export const RequestFinalizeBlockSchema: GenMessage<RequestFinalizeBlock> = /*@__PURE__*/
  messageDesc(file_tendermint_abci_types, 16);

/**
 * @generated from message tendermint.abci.Response
 */
export type Response = Message<"tendermint.abci.Response"> & {
  /**
   * @generated from oneof tendermint.abci.Response.value
   */
  value: {
    /**
     * @generated from field: tendermint.abci.ResponseException exception = 1;
     */
    value: ResponseException;
    case: "exception";
  } | {
    /**
     * @generated from field: tendermint.abci.ResponseEcho echo = 2;
     */
    value: ResponseEcho;
    case: "echo";
  } | {
    /**
     * @generated from field: tendermint.abci.ResponseFlush flush = 3;
     */
    value: ResponseFlush;
    case: "flush";
  } | {
    /**
     * @generated from field: tendermint.abci.ResponseInfo info = 4;
     */
    value: ResponseInfo;
    case: "info";
  } | {
    /**
     * @generated from field: tendermint.abci.ResponseInitChain init_chain = 6;
     */
    value: ResponseInitChain;
    case: "initChain";
  } | {
    /**
     * @generated from field: tendermint.abci.ResponseQuery query = 7;
     */
    value: ResponseQuery;
    case: "query";
  } | {
    /**
     * @generated from field: tendermint.abci.ResponseCheckTx check_tx = 9;
     */
    value: ResponseCheckTx;
    case: "checkTx";
  } | {
    /**
     * @generated from field: tendermint.abci.ResponseCommit commit = 12;
     */
    value: ResponseCommit;
    case: "commit";
  } | {
    /**
     * @generated from field: tendermint.abci.ResponseListSnapshots list_snapshots = 13;
     */
    value: ResponseListSnapshots;
    case: "listSnapshots";
  } | {
    /**
     * @generated from field: tendermint.abci.ResponseOfferSnapshot offer_snapshot = 14;
     */
    value: ResponseOfferSnapshot;
    case: "offerSnapshot";
  } | {
    /**
     * @generated from field: tendermint.abci.ResponseLoadSnapshotChunk load_snapshot_chunk = 15;
     */
    value: ResponseLoadSnapshotChunk;
    case: "loadSnapshotChunk";
  } | {
    /**
     * @generated from field: tendermint.abci.ResponseApplySnapshotChunk apply_snapshot_chunk = 16;
     */
    value: ResponseApplySnapshotChunk;
    case: "applySnapshotChunk";
  } | {
    /**
     * @generated from field: tendermint.abci.ResponsePrepareProposal prepare_proposal = 17;
     */
    value: ResponsePrepareProposal;
    case: "prepareProposal";
  } | {
    /**
     * @generated from field: tendermint.abci.ResponseProcessProposal process_proposal = 18;
     */
    value: ResponseProcessProposal;
    case: "processProposal";
  } | {
    /**
     * @generated from field: tendermint.abci.ResponseExtendVote extend_vote = 19;
     */
    value: ResponseExtendVote;
    case: "extendVote";
  } | {
    /**
     * @generated from field: tendermint.abci.ResponseVerifyVoteExtension verify_vote_extension = 20;
     */
    value: ResponseVerifyVoteExtension;
    case: "verifyVoteExtension";
  } | {
    /**
     * @generated from field: tendermint.abci.ResponseFinalizeBlock finalize_block = 21;
     */
    value: ResponseFinalizeBlock;
    case: "finalizeBlock";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message tendermint.abci.Response.
 * Use `create(ResponseSchema)` to create a new message.
 */
export const ResponseSchema: GenMessage<Response> = /*@__PURE__*/
  messageDesc(file_tendermint_abci_types, 17);

/**
 * nondeterministic
 *
 * @generated from message tendermint.abci.ResponseException
 */
export type ResponseException = Message<"tendermint.abci.ResponseException"> & {
  /**
   * @generated from field: string error = 1;
   */
  error: string;
};

/**
 * Describes the message tendermint.abci.ResponseException.
 * Use `create(ResponseExceptionSchema)` to create a new message.
 */
export const ResponseExceptionSchema: GenMessage<ResponseException> = /*@__PURE__*/
  messageDesc(file_tendermint_abci_types, 18);

/**
 * @generated from message tendermint.abci.ResponseEcho
 */
export type ResponseEcho = Message<"tendermint.abci.ResponseEcho"> & {
  /**
   * @generated from field: string message = 1;
   */
  message: string;
};

/**
 * Describes the message tendermint.abci.ResponseEcho.
 * Use `create(ResponseEchoSchema)` to create a new message.
 */
export const ResponseEchoSchema: GenMessage<ResponseEcho> = /*@__PURE__*/
  messageDesc(file_tendermint_abci_types, 19);

/**
 * @generated from message tendermint.abci.ResponseFlush
 */
export type ResponseFlush = Message<"tendermint.abci.ResponseFlush"> & {
};

/**
 * Describes the message tendermint.abci.ResponseFlush.
 * Use `create(ResponseFlushSchema)` to create a new message.
 */
export const ResponseFlushSchema: GenMessage<ResponseFlush> = /*@__PURE__*/
  messageDesc(file_tendermint_abci_types, 20);

/**
 * @generated from message tendermint.abci.ResponseInfo
 */
export type ResponseInfo = Message<"tendermint.abci.ResponseInfo"> & {
  /**
   * @generated from field: string data = 1;
   */
  data: string;

  /**
   * @generated from field: string version = 2;
   */
  version: string;

  /**
   * @generated from field: uint64 app_version = 3;
   */
  appVersion: bigint;

  /**
   * @generated from field: int64 last_block_height = 4;
   */
  lastBlockHeight: bigint;

  /**
   * @generated from field: bytes last_block_app_hash = 5;
   */
  lastBlockAppHash: Uint8Array;
};

/**
 * Describes the message tendermint.abci.ResponseInfo.
 * Use `create(ResponseInfoSchema)` to create a new message.
 */
export const ResponseInfoSchema: GenMessage<ResponseInfo> = /*@__PURE__*/
  messageDesc(file_tendermint_abci_types, 21);

/**
 * @generated from message tendermint.abci.ResponseInitChain
 */
export type ResponseInitChain = Message<"tendermint.abci.ResponseInitChain"> & {
  /**
   * @generated from field: tendermint.types.ConsensusParams consensus_params = 1;
   */
  consensusParams?: ConsensusParams;

  /**
   * @generated from field: repeated tendermint.abci.ValidatorUpdate validators = 2;
   */
  validators: ValidatorUpdate[];

  /**
   * @generated from field: bytes app_hash = 3;
   */
  appHash: Uint8Array;
};

/**
 * Describes the message tendermint.abci.ResponseInitChain.
 * Use `create(ResponseInitChainSchema)` to create a new message.
 */
export const ResponseInitChainSchema: GenMessage<ResponseInitChain> = /*@__PURE__*/
  messageDesc(file_tendermint_abci_types, 22);

/**
 * @generated from message tendermint.abci.ResponseQuery
 */
export type ResponseQuery = Message<"tendermint.abci.ResponseQuery"> & {
  /**
   * @generated from field: uint32 code = 1;
   */
  code: number;

  /**
   * bytes data = 2; // use "value" instead.
   *
   * nondeterministic
   *
   * @generated from field: string log = 3;
   */
  log: string;

  /**
   * nondeterministic
   *
   * @generated from field: string info = 4;
   */
  info: string;

  /**
   * @generated from field: int64 index = 5;
   */
  index: bigint;

  /**
   * @generated from field: bytes key = 6;
   */
  key: Uint8Array;

  /**
   * @generated from field: bytes value = 7;
   */
  value: Uint8Array;

  /**
   * @generated from field: tendermint.crypto.ProofOps proof_ops = 8;
   */
  proofOps?: ProofOps;

  /**
   * @generated from field: int64 height = 9;
   */
  height: bigint;

  /**
   * @generated from field: string codespace = 10;
   */
  codespace: string;
};

/**
 * Describes the message tendermint.abci.ResponseQuery.
 * Use `create(ResponseQuerySchema)` to create a new message.
 */
export const ResponseQuerySchema: GenMessage<ResponseQuery> = /*@__PURE__*/
  messageDesc(file_tendermint_abci_types, 23);

/**
 * @generated from message tendermint.abci.ResponseCheckTx
 */
export type ResponseCheckTx = Message<"tendermint.abci.ResponseCheckTx"> & {
  /**
   * @generated from field: uint32 code = 1;
   */
  code: number;

  /**
   * @generated from field: bytes data = 2;
   */
  data: Uint8Array;

  /**
   * nondeterministic
   *
   * @generated from field: string log = 3;
   */
  log: string;

  /**
   * nondeterministic
   *
   * @generated from field: string info = 4;
   */
  info: string;

  /**
   * @generated from field: int64 gas_wanted = 5 [json_name = "gas_wanted"];
   */
  gasWanted: bigint;

  /**
   * @generated from field: int64 gas_used = 6 [json_name = "gas_used"];
   */
  gasUsed: bigint;

  /**
   * @generated from field: repeated tendermint.abci.Event events = 7;
   */
  events: Event[];

  /**
   * @generated from field: string codespace = 8;
   */
  codespace: string;
};

/**
 * Describes the message tendermint.abci.ResponseCheckTx.
 * Use `create(ResponseCheckTxSchema)` to create a new message.
 */
export const ResponseCheckTxSchema: GenMessage<ResponseCheckTx> = /*@__PURE__*/
  messageDesc(file_tendermint_abci_types, 24);

/**
 * @generated from message tendermint.abci.ResponseCommit
 */
export type ResponseCommit = Message<"tendermint.abci.ResponseCommit"> & {
  /**
   * @generated from field: int64 retain_height = 3;
   */
  retainHeight: bigint;
};

/**
 * Describes the message tendermint.abci.ResponseCommit.
 * Use `create(ResponseCommitSchema)` to create a new message.
 */
export const ResponseCommitSchema: GenMessage<ResponseCommit> = /*@__PURE__*/
  messageDesc(file_tendermint_abci_types, 25);

/**
 * @generated from message tendermint.abci.ResponseListSnapshots
 */
export type ResponseListSnapshots = Message<"tendermint.abci.ResponseListSnapshots"> & {
  /**
   * @generated from field: repeated tendermint.abci.Snapshot snapshots = 1;
   */
  snapshots: Snapshot[];
};

/**
 * Describes the message tendermint.abci.ResponseListSnapshots.
 * Use `create(ResponseListSnapshotsSchema)` to create a new message.
 */
export const ResponseListSnapshotsSchema: GenMessage<ResponseListSnapshots> = /*@__PURE__*/
  messageDesc(file_tendermint_abci_types, 26);

/**
 * @generated from message tendermint.abci.ResponseOfferSnapshot
 */
export type ResponseOfferSnapshot = Message<"tendermint.abci.ResponseOfferSnapshot"> & {
  /**
   * @generated from field: tendermint.abci.ResponseOfferSnapshot.Result result = 1;
   */
  result: ResponseOfferSnapshot_Result;
};

/**
 * Describes the message tendermint.abci.ResponseOfferSnapshot.
 * Use `create(ResponseOfferSnapshotSchema)` to create a new message.
 */
export const ResponseOfferSnapshotSchema: GenMessage<ResponseOfferSnapshot> = /*@__PURE__*/
  messageDesc(file_tendermint_abci_types, 27);

/**
 * @generated from enum tendermint.abci.ResponseOfferSnapshot.Result
 */
export enum ResponseOfferSnapshot_Result {
  /**
   * Unknown result, abort all snapshot restoration
   *
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * Snapshot accepted, apply chunks
   *
   * @generated from enum value: ACCEPT = 1;
   */
  ACCEPT = 1,

  /**
   * Abort all snapshot restoration
   *
   * @generated from enum value: ABORT = 2;
   */
  ABORT = 2,

  /**
   * Reject this specific snapshot, try others
   *
   * @generated from enum value: REJECT = 3;
   */
  REJECT = 3,

  /**
   * Reject all snapshots of this format, try others
   *
   * @generated from enum value: REJECT_FORMAT = 4;
   */
  REJECT_FORMAT = 4,

  /**
   * Reject all snapshots from the sender(s), try others
   *
   * @generated from enum value: REJECT_SENDER = 5;
   */
  REJECT_SENDER = 5,
}

/**
 * Describes the enum tendermint.abci.ResponseOfferSnapshot.Result.
 */
export const ResponseOfferSnapshot_ResultSchema: GenEnum<ResponseOfferSnapshot_Result> = /*@__PURE__*/
  enumDesc(file_tendermint_abci_types, 27, 0);

/**
 * @generated from message tendermint.abci.ResponseLoadSnapshotChunk
 */
export type ResponseLoadSnapshotChunk = Message<"tendermint.abci.ResponseLoadSnapshotChunk"> & {
  /**
   * @generated from field: bytes chunk = 1;
   */
  chunk: Uint8Array;
};

/**
 * Describes the message tendermint.abci.ResponseLoadSnapshotChunk.
 * Use `create(ResponseLoadSnapshotChunkSchema)` to create a new message.
 */
export const ResponseLoadSnapshotChunkSchema: GenMessage<ResponseLoadSnapshotChunk> = /*@__PURE__*/
  messageDesc(file_tendermint_abci_types, 28);

/**
 * @generated from message tendermint.abci.ResponseApplySnapshotChunk
 */
export type ResponseApplySnapshotChunk = Message<"tendermint.abci.ResponseApplySnapshotChunk"> & {
  /**
   * @generated from field: tendermint.abci.ResponseApplySnapshotChunk.Result result = 1;
   */
  result: ResponseApplySnapshotChunk_Result;

  /**
   * Chunks to refetch and reapply
   *
   * @generated from field: repeated uint32 refetch_chunks = 2;
   */
  refetchChunks: number[];

  /**
   * Chunk senders to reject and ban
   *
   * @generated from field: repeated string reject_senders = 3;
   */
  rejectSenders: string[];
};

/**
 * Describes the message tendermint.abci.ResponseApplySnapshotChunk.
 * Use `create(ResponseApplySnapshotChunkSchema)` to create a new message.
 */
export const ResponseApplySnapshotChunkSchema: GenMessage<ResponseApplySnapshotChunk> = /*@__PURE__*/
  messageDesc(file_tendermint_abci_types, 29);

/**
 * @generated from enum tendermint.abci.ResponseApplySnapshotChunk.Result
 */
export enum ResponseApplySnapshotChunk_Result {
  /**
   * Unknown result, abort all snapshot restoration
   *
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * Chunk successfully accepted
   *
   * @generated from enum value: ACCEPT = 1;
   */
  ACCEPT = 1,

  /**
   * Abort all snapshot restoration
   *
   * @generated from enum value: ABORT = 2;
   */
  ABORT = 2,

  /**
   * Retry chunk (combine with refetch and reject)
   *
   * @generated from enum value: RETRY = 3;
   */
  RETRY = 3,

  /**
   * Retry snapshot (combine with refetch and reject)
   *
   * @generated from enum value: RETRY_SNAPSHOT = 4;
   */
  RETRY_SNAPSHOT = 4,

  /**
   * Reject this snapshot, try others
   *
   * @generated from enum value: REJECT_SNAPSHOT = 5;
   */
  REJECT_SNAPSHOT = 5,
}

/**
 * Describes the enum tendermint.abci.ResponseApplySnapshotChunk.Result.
 */
export const ResponseApplySnapshotChunk_ResultSchema: GenEnum<ResponseApplySnapshotChunk_Result> = /*@__PURE__*/
  enumDesc(file_tendermint_abci_types, 29, 0);

/**
 * @generated from message tendermint.abci.ResponsePrepareProposal
 */
export type ResponsePrepareProposal = Message<"tendermint.abci.ResponsePrepareProposal"> & {
  /**
   * @generated from field: repeated bytes txs = 1;
   */
  txs: Uint8Array[];
};

/**
 * Describes the message tendermint.abci.ResponsePrepareProposal.
 * Use `create(ResponsePrepareProposalSchema)` to create a new message.
 */
export const ResponsePrepareProposalSchema: GenMessage<ResponsePrepareProposal> = /*@__PURE__*/
  messageDesc(file_tendermint_abci_types, 30);

/**
 * @generated from message tendermint.abci.ResponseProcessProposal
 */
export type ResponseProcessProposal = Message<"tendermint.abci.ResponseProcessProposal"> & {
  /**
   * @generated from field: tendermint.abci.ResponseProcessProposal.ProposalStatus status = 1;
   */
  status: ResponseProcessProposal_ProposalStatus;
};

/**
 * Describes the message tendermint.abci.ResponseProcessProposal.
 * Use `create(ResponseProcessProposalSchema)` to create a new message.
 */
export const ResponseProcessProposalSchema: GenMessage<ResponseProcessProposal> = /*@__PURE__*/
  messageDesc(file_tendermint_abci_types, 31);

/**
 * @generated from enum tendermint.abci.ResponseProcessProposal.ProposalStatus
 */
export enum ResponseProcessProposal_ProposalStatus {
  /**
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: ACCEPT = 1;
   */
  ACCEPT = 1,

  /**
   * @generated from enum value: REJECT = 2;
   */
  REJECT = 2,
}

/**
 * Describes the enum tendermint.abci.ResponseProcessProposal.ProposalStatus.
 */
export const ResponseProcessProposal_ProposalStatusSchema: GenEnum<ResponseProcessProposal_ProposalStatus> = /*@__PURE__*/
  enumDesc(file_tendermint_abci_types, 31, 0);

/**
 * @generated from message tendermint.abci.ResponseExtendVote
 */
export type ResponseExtendVote = Message<"tendermint.abci.ResponseExtendVote"> & {
  /**
   * @generated from field: bytes vote_extension = 1;
   */
  voteExtension: Uint8Array;
};

/**
 * Describes the message tendermint.abci.ResponseExtendVote.
 * Use `create(ResponseExtendVoteSchema)` to create a new message.
 */
export const ResponseExtendVoteSchema: GenMessage<ResponseExtendVote> = /*@__PURE__*/
  messageDesc(file_tendermint_abci_types, 32);

/**
 * @generated from message tendermint.abci.ResponseVerifyVoteExtension
 */
export type ResponseVerifyVoteExtension = Message<"tendermint.abci.ResponseVerifyVoteExtension"> & {
  /**
   * @generated from field: tendermint.abci.ResponseVerifyVoteExtension.VerifyStatus status = 1;
   */
  status: ResponseVerifyVoteExtension_VerifyStatus;
};

/**
 * Describes the message tendermint.abci.ResponseVerifyVoteExtension.
 * Use `create(ResponseVerifyVoteExtensionSchema)` to create a new message.
 */
export const ResponseVerifyVoteExtensionSchema: GenMessage<ResponseVerifyVoteExtension> = /*@__PURE__*/
  messageDesc(file_tendermint_abci_types, 33);

/**
 * @generated from enum tendermint.abci.ResponseVerifyVoteExtension.VerifyStatus
 */
export enum ResponseVerifyVoteExtension_VerifyStatus {
  /**
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: ACCEPT = 1;
   */
  ACCEPT = 1,

  /**
   * Rejecting the vote extension will reject the entire precommit by the sender.
   * Incorrectly implementing this thus has liveness implications as it may affect
   * CometBFT's ability to receive 2/3+ valid votes to finalize the block.
   * Honest nodes should never be rejected.
   *
   * @generated from enum value: REJECT = 2;
   */
  REJECT = 2,
}

/**
 * Describes the enum tendermint.abci.ResponseVerifyVoteExtension.VerifyStatus.
 */
export const ResponseVerifyVoteExtension_VerifyStatusSchema: GenEnum<ResponseVerifyVoteExtension_VerifyStatus> = /*@__PURE__*/
  enumDesc(file_tendermint_abci_types, 33, 0);

/**
 * @generated from message tendermint.abci.ResponseFinalizeBlock
 */
export type ResponseFinalizeBlock = Message<"tendermint.abci.ResponseFinalizeBlock"> & {
  /**
   * set of block events emmitted as part of executing the block
   *
   * @generated from field: repeated tendermint.abci.Event events = 1;
   */
  events: Event[];

  /**
   * the result of executing each transaction including the events
   * the particular transction emitted. This should match the order
   * of the transactions delivered in the block itself
   *
   * @generated from field: repeated tendermint.abci.ExecTxResult tx_results = 2;
   */
  txResults: ExecTxResult[];

  /**
   * a list of updates to the validator set. These will reflect the validator set at current height + 2.
   *
   * @generated from field: repeated tendermint.abci.ValidatorUpdate validator_updates = 3;
   */
  validatorUpdates: ValidatorUpdate[];

  /**
   * updates to the consensus params, if any.
   *
   * @generated from field: tendermint.types.ConsensusParams consensus_param_updates = 4;
   */
  consensusParamUpdates?: ConsensusParams;

  /**
   * app_hash is the hash of the applications' state which is used to confirm that execution of the transactions was
   * deterministic. It is up to the application to decide which algorithm to use.
   *
   * @generated from field: bytes app_hash = 5;
   */
  appHash: Uint8Array;
};

/**
 * Describes the message tendermint.abci.ResponseFinalizeBlock.
 * Use `create(ResponseFinalizeBlockSchema)` to create a new message.
 */
export const ResponseFinalizeBlockSchema: GenMessage<ResponseFinalizeBlock> = /*@__PURE__*/
  messageDesc(file_tendermint_abci_types, 34);

/**
 * @generated from message tendermint.abci.CommitInfo
 */
export type CommitInfo = Message<"tendermint.abci.CommitInfo"> & {
  /**
   * @generated from field: int32 round = 1;
   */
  round: number;

  /**
   * @generated from field: repeated tendermint.abci.VoteInfo votes = 2;
   */
  votes: VoteInfo[];
};

/**
 * Describes the message tendermint.abci.CommitInfo.
 * Use `create(CommitInfoSchema)` to create a new message.
 */
export const CommitInfoSchema: GenMessage<CommitInfo> = /*@__PURE__*/
  messageDesc(file_tendermint_abci_types, 35);

/**
 * ExtendedCommitInfo is similar to CommitInfo except that it is only used in
 * the PrepareProposal request such that CometBFT can provide vote extensions
 * to the application.
 *
 * @generated from message tendermint.abci.ExtendedCommitInfo
 */
export type ExtendedCommitInfo = Message<"tendermint.abci.ExtendedCommitInfo"> & {
  /**
   * The round at which the block proposer decided in the previous height.
   *
   * @generated from field: int32 round = 1;
   */
  round: number;

  /**
   * List of validators' addresses in the last validator set with their voting
   * information, including vote extensions.
   *
   * @generated from field: repeated tendermint.abci.ExtendedVoteInfo votes = 2;
   */
  votes: ExtendedVoteInfo[];
};

/**
 * Describes the message tendermint.abci.ExtendedCommitInfo.
 * Use `create(ExtendedCommitInfoSchema)` to create a new message.
 */
export const ExtendedCommitInfoSchema: GenMessage<ExtendedCommitInfo> = /*@__PURE__*/
  messageDesc(file_tendermint_abci_types, 36);

/**
 * Event allows application developers to attach additional information to
 * ResponseFinalizeBlock and ResponseCheckTx.
 * Later, transactions may be queried using these events.
 *
 * @generated from message tendermint.abci.Event
 */
export type Event = Message<"tendermint.abci.Event"> & {
  /**
   * @generated from field: string type = 1;
   */
  type: string;

  /**
   * @generated from field: repeated tendermint.abci.EventAttribute attributes = 2;
   */
  attributes: EventAttribute[];
};

/**
 * Describes the message tendermint.abci.Event.
 * Use `create(EventSchema)` to create a new message.
 */
export const EventSchema: GenMessage<Event> = /*@__PURE__*/
  messageDesc(file_tendermint_abci_types, 37);

/**
 * EventAttribute is a single key-value pair, associated with an event.
 *
 * @generated from message tendermint.abci.EventAttribute
 */
export type EventAttribute = Message<"tendermint.abci.EventAttribute"> & {
  /**
   * @generated from field: string key = 1;
   */
  key: string;

  /**
   * @generated from field: string value = 2;
   */
  value: string;

  /**
   * nondeterministic
   *
   * @generated from field: bool index = 3;
   */
  index: boolean;
};

/**
 * Describes the message tendermint.abci.EventAttribute.
 * Use `create(EventAttributeSchema)` to create a new message.
 */
export const EventAttributeSchema: GenMessage<EventAttribute> = /*@__PURE__*/
  messageDesc(file_tendermint_abci_types, 38);

/**
 * ExecTxResult contains results of executing one individual transaction.
 *
 * * Its structure is equivalent to #ResponseDeliverTx which will be deprecated/deleted
 *
 * @generated from message tendermint.abci.ExecTxResult
 */
export type ExecTxResult = Message<"tendermint.abci.ExecTxResult"> & {
  /**
   * @generated from field: uint32 code = 1;
   */
  code: number;

  /**
   * @generated from field: bytes data = 2;
   */
  data: Uint8Array;

  /**
   * nondeterministic
   *
   * @generated from field: string log = 3;
   */
  log: string;

  /**
   * nondeterministic
   *
   * @generated from field: string info = 4;
   */
  info: string;

  /**
   * @generated from field: int64 gas_wanted = 5 [json_name = "gas_wanted"];
   */
  gasWanted: bigint;

  /**
   * @generated from field: int64 gas_used = 6 [json_name = "gas_used"];
   */
  gasUsed: bigint;

  /**
   * nondeterministic
   *
   * @generated from field: repeated tendermint.abci.Event events = 7;
   */
  events: Event[];

  /**
   * @generated from field: string codespace = 8;
   */
  codespace: string;
};

/**
 * Describes the message tendermint.abci.ExecTxResult.
 * Use `create(ExecTxResultSchema)` to create a new message.
 */
export const ExecTxResultSchema: GenMessage<ExecTxResult> = /*@__PURE__*/
  messageDesc(file_tendermint_abci_types, 39);

/**
 * TxResult contains results of executing the transaction.
 *
 * One usage is indexing transaction results.
 *
 * @generated from message tendermint.abci.TxResult
 */
export type TxResult = Message<"tendermint.abci.TxResult"> & {
  /**
   * @generated from field: int64 height = 1;
   */
  height: bigint;

  /**
   * @generated from field: uint32 index = 2;
   */
  index: number;

  /**
   * @generated from field: bytes tx = 3;
   */
  tx: Uint8Array;

  /**
   * @generated from field: tendermint.abci.ExecTxResult result = 4;
   */
  result?: ExecTxResult;
};

/**
 * Describes the message tendermint.abci.TxResult.
 * Use `create(TxResultSchema)` to create a new message.
 */
export const TxResultSchema: GenMessage<TxResult> = /*@__PURE__*/
  messageDesc(file_tendermint_abci_types, 40);

/**
 * @generated from message tendermint.abci.Validator
 */
export type Validator = Message<"tendermint.abci.Validator"> & {
  /**
   * The first 20 bytes of SHA256(public key)
   *
   * @generated from field: bytes address = 1;
   */
  address: Uint8Array;

  /**
   * PubKey pub_key = 2 [(gogoproto.nullable)=false];
   *
   * The voting power
   *
   * @generated from field: int64 power = 3;
   */
  power: bigint;
};

/**
 * Describes the message tendermint.abci.Validator.
 * Use `create(ValidatorSchema)` to create a new message.
 */
export const ValidatorSchema: GenMessage<Validator> = /*@__PURE__*/
  messageDesc(file_tendermint_abci_types, 41);

/**
 * @generated from message tendermint.abci.ValidatorUpdate
 */
export type ValidatorUpdate = Message<"tendermint.abci.ValidatorUpdate"> & {
  /**
   * @generated from field: tendermint.crypto.PublicKey pub_key = 1;
   */
  pubKey?: PublicKey;

  /**
   * @generated from field: int64 power = 2;
   */
  power: bigint;
};

/**
 * Describes the message tendermint.abci.ValidatorUpdate.
 * Use `create(ValidatorUpdateSchema)` to create a new message.
 */
export const ValidatorUpdateSchema: GenMessage<ValidatorUpdate> = /*@__PURE__*/
  messageDesc(file_tendermint_abci_types, 42);

/**
 * @generated from message tendermint.abci.VoteInfo
 */
export type VoteInfo = Message<"tendermint.abci.VoteInfo"> & {
  /**
   * @generated from field: tendermint.abci.Validator validator = 1;
   */
  validator?: Validator;

  /**
   * @generated from field: tendermint.types.BlockIDFlag block_id_flag = 3;
   */
  blockIdFlag: BlockIDFlag;
};

/**
 * Describes the message tendermint.abci.VoteInfo.
 * Use `create(VoteInfoSchema)` to create a new message.
 */
export const VoteInfoSchema: GenMessage<VoteInfo> = /*@__PURE__*/
  messageDesc(file_tendermint_abci_types, 43);

/**
 * @generated from message tendermint.abci.ExtendedVoteInfo
 */
export type ExtendedVoteInfo = Message<"tendermint.abci.ExtendedVoteInfo"> & {
  /**
   * The validator that sent the vote.
   *
   * @generated from field: tendermint.abci.Validator validator = 1;
   */
  validator?: Validator;

  /**
   * Non-deterministic extension provided by the sending validator's application.
   *
   * @generated from field: bytes vote_extension = 3;
   */
  voteExtension: Uint8Array;

  /**
   * Vote extension signature created by CometBFT
   *
   * @generated from field: bytes extension_signature = 4;
   */
  extensionSignature: Uint8Array;

  /**
   * block_id_flag indicates whether the validator voted for a block, nil, or did not vote at all
   *
   * @generated from field: tendermint.types.BlockIDFlag block_id_flag = 5;
   */
  blockIdFlag: BlockIDFlag;
};

/**
 * Describes the message tendermint.abci.ExtendedVoteInfo.
 * Use `create(ExtendedVoteInfoSchema)` to create a new message.
 */
export const ExtendedVoteInfoSchema: GenMessage<ExtendedVoteInfo> = /*@__PURE__*/
  messageDesc(file_tendermint_abci_types, 44);

/**
 * @generated from message tendermint.abci.Misbehavior
 */
export type Misbehavior = Message<"tendermint.abci.Misbehavior"> & {
  /**
   * @generated from field: tendermint.abci.MisbehaviorType type = 1;
   */
  type: MisbehaviorType;

  /**
   * The offending validator
   *
   * @generated from field: tendermint.abci.Validator validator = 2;
   */
  validator?: Validator;

  /**
   * The height when the offense occurred
   *
   * @generated from field: int64 height = 3;
   */
  height: bigint;

  /**
   * The corresponding time where the offense occurred
   *
   * @generated from field: google.protobuf.Timestamp time = 4;
   */
  time?: Timestamp;

  /**
   * Total voting power of the validator set in case the ABCI application does
   * not store historical validators.
   * https://github.com/tendermint/tendermint/issues/4581
   *
   * @generated from field: int64 total_voting_power = 5;
   */
  totalVotingPower: bigint;
};

/**
 * Describes the message tendermint.abci.Misbehavior.
 * Use `create(MisbehaviorSchema)` to create a new message.
 */
export const MisbehaviorSchema: GenMessage<Misbehavior> = /*@__PURE__*/
  messageDesc(file_tendermint_abci_types, 45);

/**
 * @generated from message tendermint.abci.Snapshot
 */
export type Snapshot = Message<"tendermint.abci.Snapshot"> & {
  /**
   * The height at which the snapshot was taken
   *
   * @generated from field: uint64 height = 1;
   */
  height: bigint;

  /**
   * The application-specific snapshot format
   *
   * @generated from field: uint32 format = 2;
   */
  format: number;

  /**
   * Number of chunks in the snapshot
   *
   * @generated from field: uint32 chunks = 3;
   */
  chunks: number;

  /**
   * Arbitrary snapshot hash, equal only if identical
   *
   * @generated from field: bytes hash = 4;
   */
  hash: Uint8Array;

  /**
   * Arbitrary application metadata
   *
   * @generated from field: bytes metadata = 5;
   */
  metadata: Uint8Array;
};

/**
 * Describes the message tendermint.abci.Snapshot.
 * Use `create(SnapshotSchema)` to create a new message.
 */
export const SnapshotSchema: GenMessage<Snapshot> = /*@__PURE__*/
  messageDesc(file_tendermint_abci_types, 46);

/**
 * @generated from enum tendermint.abci.CheckTxType
 */
export enum CheckTxType {
  /**
   * @generated from enum value: NEW = 0;
   */
  NEW = 0,

  /**
   * @generated from enum value: RECHECK = 1;
   */
  RECHECK = 1,
}

/**
 * Describes the enum tendermint.abci.CheckTxType.
 */
export const CheckTxTypeSchema: GenEnum<CheckTxType> = /*@__PURE__*/
  enumDesc(file_tendermint_abci_types, 0);

/**
 * @generated from enum tendermint.abci.MisbehaviorType
 */
export enum MisbehaviorType {
  /**
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: DUPLICATE_VOTE = 1;
   */
  DUPLICATE_VOTE = 1,

  /**
   * @generated from enum value: LIGHT_CLIENT_ATTACK = 2;
   */
  LIGHT_CLIENT_ATTACK = 2,
}

/**
 * Describes the enum tendermint.abci.MisbehaviorType.
 */
export const MisbehaviorTypeSchema: GenEnum<MisbehaviorType> = /*@__PURE__*/
  enumDesc(file_tendermint_abci_types, 1);

/**
 * @generated from service tendermint.abci.ABCI
 */
export const ABCI: GenService<{
  /**
   * @generated from rpc tendermint.abci.ABCI.Echo
   */
  echo: {
    methodKind: "unary";
    input: typeof RequestEchoSchema;
    output: typeof ResponseEchoSchema;
  },
  /**
   * @generated from rpc tendermint.abci.ABCI.Flush
   */
  flush: {
    methodKind: "unary";
    input: typeof RequestFlushSchema;
    output: typeof ResponseFlushSchema;
  },
  /**
   * @generated from rpc tendermint.abci.ABCI.Info
   */
  info: {
    methodKind: "unary";
    input: typeof RequestInfoSchema;
    output: typeof ResponseInfoSchema;
  },
  /**
   * @generated from rpc tendermint.abci.ABCI.CheckTx
   */
  checkTx: {
    methodKind: "unary";
    input: typeof RequestCheckTxSchema;
    output: typeof ResponseCheckTxSchema;
  },
  /**
   * @generated from rpc tendermint.abci.ABCI.Query
   */
  query: {
    methodKind: "unary";
    input: typeof RequestQuerySchema;
    output: typeof ResponseQuerySchema;
  },
  /**
   * @generated from rpc tendermint.abci.ABCI.Commit
   */
  commit: {
    methodKind: "unary";
    input: typeof RequestCommitSchema;
    output: typeof ResponseCommitSchema;
  },
  /**
   * @generated from rpc tendermint.abci.ABCI.InitChain
   */
  initChain: {
    methodKind: "unary";
    input: typeof RequestInitChainSchema;
    output: typeof ResponseInitChainSchema;
  },
  /**
   * @generated from rpc tendermint.abci.ABCI.ListSnapshots
   */
  listSnapshots: {
    methodKind: "unary";
    input: typeof RequestListSnapshotsSchema;
    output: typeof ResponseListSnapshotsSchema;
  },
  /**
   * @generated from rpc tendermint.abci.ABCI.OfferSnapshot
   */
  offerSnapshot: {
    methodKind: "unary";
    input: typeof RequestOfferSnapshotSchema;
    output: typeof ResponseOfferSnapshotSchema;
  },
  /**
   * @generated from rpc tendermint.abci.ABCI.LoadSnapshotChunk
   */
  loadSnapshotChunk: {
    methodKind: "unary";
    input: typeof RequestLoadSnapshotChunkSchema;
    output: typeof ResponseLoadSnapshotChunkSchema;
  },
  /**
   * @generated from rpc tendermint.abci.ABCI.ApplySnapshotChunk
   */
  applySnapshotChunk: {
    methodKind: "unary";
    input: typeof RequestApplySnapshotChunkSchema;
    output: typeof ResponseApplySnapshotChunkSchema;
  },
  /**
   * @generated from rpc tendermint.abci.ABCI.PrepareProposal
   */
  prepareProposal: {
    methodKind: "unary";
    input: typeof RequestPrepareProposalSchema;
    output: typeof ResponsePrepareProposalSchema;
  },
  /**
   * @generated from rpc tendermint.abci.ABCI.ProcessProposal
   */
  processProposal: {
    methodKind: "unary";
    input: typeof RequestProcessProposalSchema;
    output: typeof ResponseProcessProposalSchema;
  },
  /**
   * @generated from rpc tendermint.abci.ABCI.ExtendVote
   */
  extendVote: {
    methodKind: "unary";
    input: typeof RequestExtendVoteSchema;
    output: typeof ResponseExtendVoteSchema;
  },
  /**
   * @generated from rpc tendermint.abci.ABCI.VerifyVoteExtension
   */
  verifyVoteExtension: {
    methodKind: "unary";
    input: typeof RequestVerifyVoteExtensionSchema;
    output: typeof ResponseVerifyVoteExtensionSchema;
  },
  /**
   * @generated from rpc tendermint.abci.ABCI.FinalizeBlock
   */
  finalizeBlock: {
    methodKind: "unary";
    input: typeof RequestFinalizeBlockSchema;
    output: typeof ResponseFinalizeBlockSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_tendermint_abci_types, 0);

